<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />

		<title>Engine Sample: Legacy material system</title>

		<!-- EngineJS -->
		<script type="text/javascript" src="enginejs/jquery.js"></script>
		<script type="text/javascript" src="enginejs/engine.js"></script>

		<!-- Spectrum colour picker -->
		<script src='enginejs/resources/misc/spectrum/spectrum.js'></script>
		<link rel='stylesheet' href='enginejs/resources/misc/spectrum/spectrum.css' />

		<script language="javascript">
		var resources =
		{
			tx_albedo   : { file : "img/sponge_a.png" },
			tx_specular : { file : "img/sponge_s.png" },
			tx_normal   : { file : "img/sponge_n.png", is_normal_map : true },
		};

		// ====================================================================================================================================
		// Misc
		// ====================================================================================================================================
		var cam = null;
		var mtx_trans = null;

		// ====================================================================================================================================
		// Models
		// ====================================================================================================================================
		var model_floor = null;
		var models = null;

		// ====================================================================================================================================
		// Shader programs
		// ====================================================================================================================================
		var program_floor;
		var program_ambient;
		var program_diffuse;
		var program_specular;
		var program_specular_map;
		var program_normal_map;
		var program_white_unlit;

		// ====================================================================================================================================
		// Light update / render
		// ====================================================================================================================================
		var sun_pos = [0, 5, 0];		// origin
		var sun_angle = 0;				// 0 = straight down y-axis
		var sun_forward = [ 0, -1, 0 ];	// 0 = straight down y-axis

		function update_light(info)
		{
			var light_move_speed = 0.1;
			sun_angle = $("#sun_angle").slider("value");
			sun_angle += Engine.Mouse.GetWheelDelta() / 20;
			$("#sun_angle").slider('value', sun_angle);
			draw_light(sun_pos, sun_angle);
		};

		function draw_light(sun_pos)
		{
			// Draw light as sphere
			mat4.translate(mtx_trans, Engine.Math.IdentityMatrix, sun_pos);
			mat4.scale(mtx_trans, mtx_trans, [0.3, 0.3, 0.3]);
			Engine.Gfx.BindShaderProgram(program_white_unlit);
			Engine.Gfx.SetShaderConstant("u_trans_world", mtx_trans, Engine.Gfx.SC_MATRIX4);
			Engine.Gfx.SetShaderConstant("u_colour", Engine.Colour.White, Engine.Gfx.SC_COLOUR);
			Engine.Gfx.DrawModel(models[2]);

			// Draw light basis
			Engine.Debug.DrawArrow3D(cam, sun_pos, [sun_pos[0] + 3, sun_pos[1],     sun_pos[2]],     Engine.Colour.Red, 1);
			Engine.Debug.DrawArrow3D(cam, sun_pos, [sun_pos[0],     sun_pos[1] + 3, sun_pos[2]],     Engine.Colour.Green, 1);
			Engine.Debug.DrawArrow3D(cam, sun_pos, [sun_pos[0],     sun_pos[1],     sun_pos[2] + 3], Engine.Colour.Blue, 1);

			// Draw light angle
			mat4.fromRotation(mtx_trans, Engine.Math.DegToRad(sun_angle), [0, 0, -1]);
			vec3.transformMat4(sun_forward, [0, -1, 0], mtx_trans);

			var lp = [ sun_pos[0], sun_pos[1], sun_pos[2] ];
			Engine.Debug.DrawArrow3D(cam, lp, [lp[0] + (sun_forward[0] * 3),     lp[1]+ (sun_forward[1] * 3),     lp[2]+ (sun_forward[2] * 3)], Engine.Colour.Orange, 1);
			lp[0] = sun_pos[0] + 0.2;
			Engine.Debug.DrawArrow3D(cam, lp, [lp[0] + (sun_forward[0] * 3),     lp[1]+ (sun_forward[1] * 3),     lp[2]+ (sun_forward[2] * 3)], Engine.Colour.Orange, 1);
			lp[0] = sun_pos[0] - 0.2;
			Engine.Debug.DrawArrow3D(cam, lp, [lp[0] + (sun_forward[0] * 3),     lp[1]+ (sun_forward[1] * 3),     lp[2]+ (sun_forward[2] * 3)], Engine.Colour.Orange, 1);
		};

		// ====================================================================================================================================
		// Colour picker helpers
		// ====================================================================================================================================
		function colour_from_picker_rgb(picker_selector)
		{
			var raw_value = $(picker_selector).spectrum("get").toRgb();
			return [raw_value.r /= 255, raw_value.g /= 255, raw_value.b /= 255 ];
		};

		function colour_from_picker_rgba(picker_selector)
		{
			var raw_value = $(picker_selector).spectrum("get").toRgb();
			return [raw_value.r /= 255, raw_value.g /= 255, raw_value.b /= 255, raw_value.a /= 255 ];
		};

		$(document).ready(function()
		{
			var on_init = function()
			{
				mtx_trans = mat4.create();

				// Setup models
				model_floor = Engine.Resources["ml_floor_tile"];
				models =
				[
					Engine.Resources["ml_cube"],
					Engine.Geometry.MakePlane({ x_size : 2, z_size : 2}),
					Engine.Geometry.MakeSphere(),
				];

				// Compile shaders
				program_floor                   = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed"],
				                                                                 Engine.Resources["fs_grid_xz_fog"]);
				program_ambient                 = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals"],
				                                                                 Engine.Resources["fs_legacy_ambient"]);
				program_diffuse                 = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals"],
				                                                                 Engine.Resources["fs_legacy_diffuse"]);
				program_specular                = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals"],
				                                                                 Engine.Resources["fs_legacy_specular"]);
				program_specular_map            = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals"],
				                                                                 Engine.Resources["fs_legacy_specular_map"]);
				program_normal_map              = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals_tangents"],
				                                                                 Engine.Resources["fs_legacy_specular_normal_map"]);
				program_specular_map_normal_map = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals_tangents"],
				                                                                 Engine.Resources["fs_legacy_specular_map_normal_map"]);
				program_white_unlit             = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed"],
				                                                                 Engine.Resources["fs_unlit_colour"]);

				// Setup roam cam
				cam = new Engine.Camera.Perspective({ position: [0, 4, -5] });
				cam.AttachHelper(new Engine.Camera.Helper.Roam({ forward : [0, 0, 1] }));

				// Setup UI colour pickers
				var config = { showInput: false, showButtons: false, preferredFormat: "rgb" };
				$("#sun_ambient").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#sun_specular").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#sun_diffuse").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#material_colour").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#material_specular").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#sun_ambient").spectrum("set", "rgba 70 70 70 255");
				$("#sun_diffuse").spectrum("set", "rgba 255 255 255 255");
				$("#sun_specular").spectrum("set", "rgba 255 255 255 255");
				$("#material_colour").spectrum("set", "rgba 255 255 255 255");
				$("#material_specular").spectrum("set", "rgba 255 255 255 255");

				// Setup UI sliders
				$("#material_shininess").slider({ label : "Shininess", value: 0.078125, min: 0.03,   max: 1,   step: 0.01 })
				$("#material_fresnel_bias").slider({ label : "Fresnel Bias", value: 0.0, min: -1,   max: 1,   step: 0.01 })
				$("#material_fresnel_scale").slider({ label : "Fresnel Scale", value: 0.0, min: 0,   max: 1,   step: 0.01 })
				$("#material_fresnel_power").slider({ label : "Fresnel Scale", value: 1.4, min: 1,   max: 5,   step: 0.01 })
				$("#normal_strength").slider({ label : "Normal Strength", value: 1, min: 0,   max: 1,   step: 0.01 })
				$("#model_select").slider({ label : "Model select", value: 1, min: 0,   max: 2,   step: 1 })
				$("#sun_angle").slider({ label : "Sun Angle", value: 0, min: -180,   max: 180,   step: 1 })

				var on_render = function(info)
				{
					// Clear
					Engine.Gfx.Clear(Engine.Colour.Black);
					Engine.Gfx.SetDepthTestMode(Engine.GL.LESS, true);

					// Update & bind camera
					cam.Update(info);
					Engine.Gfx.BindCamera(cam);

					// Update light
					update_light(info);

					// Draw floor
					mat4.scale(mtx_trans, Engine.Math.IdentityMatrix, [100, 0, 100]);
					Engine.Gfx.BindShaderProgram(program_floor);
					Engine.Gfx.SetShaderConstant("u_trans_world", mtx_trans, Engine.Gfx.SC_MATRIX4);
					Engine.Gfx.DrawModel(model_floor);

					// Set shader
					var shader_mode = $('select').val();
					if(shader_mode == "ambient")                 { Engine.Gfx.BindShaderProgram(program_ambient); }
					if(shader_mode == "diffuse")                 { Engine.Gfx.BindShaderProgram(program_diffuse); }
					if(shader_mode == "specular")                { Engine.Gfx.BindShaderProgram(program_specular); }
					if(shader_mode == "specular-map")            { Engine.Gfx.BindShaderProgram(program_specular_map); }
					if(shader_mode == "normal-map")              { Engine.Gfx.BindShaderProgram(program_normal_map); }
					if(shader_mode == "specular-map-normal-map") { Engine.Gfx.BindShaderProgram(program_specular_map_normal_map); }

					// Bind global "sun" params
					Engine.Gfx.SetShaderConstant("u_sun_ambient", colour_from_picker_rgb("#sun_ambient"), Engine.Gfx.SC_VEC3);
					if(shader_mode == "diffuse" || shader_mode == "specular" || shader_mode == "specular-map" || shader_mode == "normal-map" || shader_mode == "specular-map-normal-map")
					{
						Engine.Gfx.SetShaderConstant("u_sun_diffuse", colour_from_picker_rgb("#sun_diffuse"), Engine.Gfx.SC_VEC3);
						Engine.Gfx.SetShaderConstant("u_sun_dir", sun_forward, Engine.Gfx.SC_VEC3);
					}
					if(shader_mode == "specular" || shader_mode == "specular-map" || shader_mode == "normal-map" || shader_mode == "specular-map-normal-map")
					{
						Engine.Gfx.SetShaderConstant("u_sun_specular", colour_from_picker_rgb("#sun_specular"), Engine.Gfx.SC_VEC3);
					}

					// Bind material properties
					Engine.Gfx.SetShaderConstant("u_material_colour", colour_from_picker_rgba("#material_colour"), Engine.Gfx.SC_VEC4);
					Engine.Gfx.SetShaderConstant("u_material_normal_strength", $("#normal_strength").slider("value"), Engine.Gfx.SC_FLOAT);
					if(shader_mode == "specular"  || shader_mode == "specular-map" || shader_mode == "normal-map" || shader_mode == "specular-map-normal-map")
					{
						Engine.Gfx.SetShaderConstant("u_material_specular", colour_from_picker_rgba("#material_specular"), Engine.Gfx.SC_VEC4);
						Engine.Gfx.SetShaderConstant("u_material_shininess", $("#material_shininess").slider("value"), Engine.Gfx.SC_FLOAT);
					}

					// Fresnel
					Engine.Gfx.SetShaderConstant("u_material_fresnel_bias", $("#material_fresnel_bias").slider("value"), Engine.Gfx.SC_FLOAT);
					Engine.Gfx.SetShaderConstant("u_material_fresnel_scale", $("#material_fresnel_scale").slider("value"), Engine.Gfx.SC_FLOAT);
					Engine.Gfx.SetShaderConstant("u_material_fresnel_power", $("#material_fresnel_power").slider("value"), Engine.Gfx.SC_FLOAT);

					// Bind textures
					Engine.Gfx.BindTexture(resources["tx_albedo"], 0, "u_material_tx_albedo");
					if(shader_mode == "normal-map" || shader_mode == "specular-map-normal-map")
					{
						Engine.Gfx.BindTexture(resources["tx_normal"], 1, "u_material_tx_normal");
					}
					if(shader_mode == "specular-map" || shader_mode == "specular-map-normal-map")
					{
						Engine.Gfx.BindTexture(resources["tx_specular"], 2, "u_material_tx_specular");
					}

					// Draw models
					var model_index = 0;
					for(var i = -5; i <= 5; ++i)
					{
						for(var j = -5; j <= 5; ++j)
						{
							// Pick model
							var model = models[model_index++ % models.length];

							// Position on grid and rotate
							mat4.translate(mtx_trans, Engine.Math.IdentityMatrix, [i * 3, 1.2, j * 3]);
							if($('#cb_rotate').is(":checked"))
							{
								mat4.rotate(mtx_trans, mtx_trans, info.elapsed_s / 3.0, [0, 1, 0]);
							}

							// Bind transform
							Engine.Gfx.SetShaderConstant("u_trans_world", mtx_trans, Engine.Gfx.SC_MATRIX4);

							// Draw model
							Engine.Gfx.DrawModel(model);

							// Draw normals
							var debug_normals = $('#cb_show_normals').is(":checked");
							var debug_tangents = $('#cb_show_tangents').is(":checked");
							if(debug_normals || debug_tangents)
							{
								var verts = model.model_data.primitives[0].vertex_buffers[0].stream;
								var normals = model.model_data.primitives[0].vertex_buffers[1].stream;
								var tangents = model.model_data.primitives[0].vertex_buffers[4].stream;
								for(var x= 0; x < verts.length; x +=3)
								{
									var v0 = verts[x + 0];
									var v1 = verts[x + 1] + 2;
									var v2 = verts[x + 2];

									if(debug_normals)
									{
										var n0 = normals[x + 0];
										var n1 = normals[x + 1];
										var n2 = normals[x + 2];
										Engine.Debug.DrawArrow3D(cam, [v0, v1, v2], [v0 + n0, v1 + n1, v2 + n2], Engine.Colour.Red, 1);
									}
									
									if(debug_tangents)
									{
										var t0 = tangents[x + 0];
										var t1 = tangents[x + 1];
										var t2 = tangents[x + 2];
										Engine.Debug.DrawArrow3D(cam, [v0, v1, v2], [v0 + t0, v1 + t1, v2 + t2], Engine.Colour.Blue, 1);
									}
								}
							}
						}
					}
				};
				return on_render;
			};
			Engine.Init(on_init, resources);
		});
		</script>
	</head>

	<body>
		<table style="width:100%">
			<tr>
				<td style="width:1200px;vertical-align:top"><canvas width="1024" height="800"></canvas></td>
				<td id="param_editor_window" style="background-color:white;padding:20px;vertical-align:top">
					<h4>Lighting Model</h4>
					<select>
						<option value="specular-map-normal-map">specular-map-normal-map</option>
						<option value="normal-map">normal-map</option>
						<option value="specular-map">specular-map</option>
						<option value="specular">specular</option>
						<option value="ambient">ambient</option>
						<option value="diffuse">diffuse</option>
					</select>

					<h4>Debug</h4>
					Model select:
					<div id="model_select" style="width:200px"></div>
					<br/>
					Rotate: <input type="checkbox" id="cb_rotate" id="" />
					Show normals: <input type="checkbox" id="cb_show_normals" id="" />
					Show tangents: <input type="checkbox" id="cb_show_tangents" id="" />

					<h4>Material Properties</h4>
					Material colour<br/>
					<input type="text" id="material_colour"/></input><br/>
					Material specular<br/>					
					<input type="text" id="material_specular"/></input><br/>
					Shininess:
					<div id="material_shininess" style="width:200px"/></div>
					Normal Strength:
					<div id="normal_strength" style="width:200px"/></div>
					Fresnel Bias:
					<div id="material_fresnel_bias" style="width:200px"/></div>
					Fresnel Scale:
					<div id="material_fresnel_scale" style="width:200px"/></div>
					Fresnel Power:
					<div id="material_fresnel_power" style="width:200px"/></div>
					<br/>

					<h4>Global Light Properties</h4>
					Sun Angle:
					<div id="sun_angle" style="width:200px"/></div>

					Sun Ambient<br/>
					<input type="text" id="sun_ambient"></input><br/>
					Sun Diffuse<br/>
					<input type="text" id="sun_diffuse"></input><br/>
					Sun Specular<br/>
					<input type="text" id="sun_specular"></input>
				</td>
			</tr>
		</table>
	</body>
</html>