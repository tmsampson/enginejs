<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />

		<title>Engine Sample: Legacy material system</title>

		<!-- EngineJS -->
		<script type="text/javascript" src="enginejs/jquery.js"></script>
		<script type="text/javascript" src="enginejs/engine.js"></script>

		<!-- Spectrum colour picker -->
		<script src='enginejs/resources/misc/spectrum/spectrum.js'></script>
		<link rel='stylesheet' href='enginejs/resources/misc/spectrum/spectrum.css' />

		<script language="javascript">
		var resources =
		{
			tx_stone_albedo : { file : "img/stone-albedo.jpg" },
			tx_stone_normal : { file : "img/stone-normal.jpg" },
		};

		$(document).ready(function()
		{
			var on_init = function()
			{
				var mtx_trans = mat4.create();
				var mtx_stone_normal = mat3.create();

				var models =
				[
					Engine.Resources["ml_cube"],
					Engine.Geometry.MakePlane({ x_size : 2, z_size : 2}),
					Engine.Geometry.MakeSphere(),
				];

				var model_floor = Engine.Resources["ml_floor_tile"];
				var program_floor = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed"],
				                                                   Engine.Resources["fs_grid_xz_fog"]);

				var program_cube_ambient  = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals"],
				                                                   Engine.Resources["fs_legacy_ambient"]);
				var program_cube_diffuse  = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals"],
				                                                   Engine.Resources["fs_legacy_diffuse"]);
				var program_cube_phong  = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_normals"],
				                                                   Engine.Resources["fs_legacy_specular"]);
				var program_light = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed"],
				                                                   Engine.Resources["fs_unlit_colour"]);

				// Setup orbit cam
				var cam = new Engine.Camera.Perspective({ position: [0, 10, -10] });
				cam.AttachHelper(new Engine.Camera.Helper.Roam({ forward : [0, -1, 1] }));

				// Setup colour pickers
				var config =
				{
					flat: true,
					showInput: false,
					showButtons: false,
					preferredFormat: "rgb"
				};

				$("#sun_ambient").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#sun_specular").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#sun_diffuse").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#material_colour").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#material_specular").spectrum($.extend({}, config, { move : function(color) { } }));
				$("#sun_ambient").spectrum("set", "rgba 70 70 70 255");
				$("#sun_diffuse").spectrum("set", "rgba 255 255 255 255");
				$("#sun_specular").spectrum("set", "rgba 255 255 255 255");
				$("#material_colour").spectrum("set", "rgba 255 255 255 255");
				$("#material_specular").spectrum("set", "rgba 255 255 255 255");
				$("#material_shininess").slider({ label : "Shininess", value: 50, min: 1,   max: 100,   step: 1 })

				var draw_mesh_ambient_only = function(model, mtx_trans, sun_ambient, sun_diffuse, sun_specular, material_colour, material_specular)
				{
					// Bind transform
					Engine.Gfx.BindShaderProgram(program_cube_ambient);
					Engine.Gfx.SetShaderConstant("u_trans_world", mtx_trans, Engine.Gfx.SC_MATRIX4);

					// Bind global "sun" params
					Engine.Gfx.SetShaderConstant("u_sun_ambient", sun_ambient, Engine.Gfx.SC_VEC3);

					// Bind material properties
					Engine.Gfx.SetShaderConstant("u_material_colour", material_colour, Engine.Gfx.SC_VEC4);
					Engine.Gfx.BindTexture(resources["tx_stone_albedo"], 0, "u_material_tx_albedo");

					// Draw cube
					Engine.Gfx.DrawModel(model);
				};

				var draw_mesh_diffuse = function(model, mtx_trans, sun_ambient, sun_diffuse, sun_specular, material_colour, material_specular)
				{
					// Bind transform
					Engine.Gfx.BindShaderProgram(program_cube_diffuse);
					Engine.Gfx.SetShaderConstant("u_trans_world", mtx_trans, Engine.Gfx.SC_MATRIX4);

					// Bind global "sun" params
					Engine.Gfx.SetShaderConstant("u_sun_ambient", sun_ambient, Engine.Gfx.SC_VEC3);
					Engine.Gfx.SetShaderConstant("u_sun_diffuse", sun_diffuse, Engine.Gfx.SC_VEC3);
					Engine.Gfx.SetShaderConstant("u_sun_dir", [0.71, -0.71, 0], Engine.Gfx.SC_VEC3);

					// Bind material properties
					Engine.Gfx.SetShaderConstant("u_material_colour", material_colour, Engine.Gfx.SC_VEC4);
					Engine.Gfx.BindTexture(resources["tx_stone_albedo"], 0, "u_material_tx_albedo");

					//Engine.Gfx.SetShaderConstant("u_light", [light_x, light_y, light_z], Engine.Gfx.SC_VEC3);

					// Draw cube
					Engine.Gfx.DrawModel(model);
				};

				var draw_mesh_specular = function(model, mtx_trans, sun_ambient, sun_diffuse, sun_specular, material_colour, material_specular)
				{
					// Bind transform
					Engine.Gfx.BindShaderProgram(program_cube_phong);
					Engine.Gfx.SetShaderConstant("u_trans_world", mtx_trans, Engine.Gfx.SC_MATRIX4);

					// Bind global "sun" params
					Engine.Gfx.SetShaderConstant("u_sun_ambient", sun_ambient, Engine.Gfx.SC_VEC3);
					Engine.Gfx.SetShaderConstant("u_sun_diffuse", sun_diffuse, Engine.Gfx.SC_VEC3);
					Engine.Gfx.SetShaderConstant("u_sun_specular", sun_specular, Engine.Gfx.SC_VEC3);
					Engine.Gfx.SetShaderConstant("u_sun_dir", [0.71, -0.71, 0], Engine.Gfx.SC_VEC3);

					// Bind material properties
					Engine.Gfx.SetShaderConstant("u_material_colour", material_colour, Engine.Gfx.SC_VEC4);
					Engine.Gfx.SetShaderConstant("u_material_specular", material_specular, Engine.Gfx.SC_VEC4);
					Engine.Gfx.SetShaderConstant("u_material_shininess", $("#material_shininess").slider("value"), Engine.Gfx.SC_FLOAT);				
					Engine.Gfx.BindTexture(resources["tx_stone_albedo"], 0, "u_material_tx_albedo");

					//Engine.Gfx.SetShaderConstant("u_light", [light_x, light_y, light_z], Engine.Gfx.SC_VEC3);

					// Draw cube
					Engine.Gfx.DrawModel(model);
				};

				// Handle lighting model change
				var lighting_func = draw_mesh_ambient_only;
				$("select").change(function()
				{
					var lighting_model = $('select').val();
					if(lighting_model == "simple-ambient-only")
						lighting_func = draw_mesh_ambient_only;
					else if(lighting_model == "simple-diffuse")
						lighting_func = draw_mesh_diffuse;
					else if(lighting_model == "simple-phong")
						lighting_func = draw_mesh_specular;
				});

				var draw_light = function(x, y, z)
				{
					// Draw light as cube
					var light_pos = [x, y, z];
					mat4.translate(mtx_trans, Engine.Math.IdentityMatrix, light_pos);
					mat4.scale(mtx_trans, mtx_trans, [0.5, 0.5, 0.5]);
					Engine.Gfx.BindShaderProgram(program_light);
					Engine.Gfx.SetShaderConstant("u_trans_world", mtx_trans, Engine.Gfx.SC_MATRIX4);
					Engine.Gfx.SetShaderConstant("u_colour", [1, 1, 1, 1], Engine.Gfx.SC_COLOUR);
					Engine.Gfx.DrawModel(models[2]);

					// Draw light basis
					Engine.Debug.DrawArrow3D(cam, light_pos, [x + 3, y, z], Engine.Colour.Red, 1);
					Engine.Debug.DrawArrow3D(cam, light_pos, [x, y + 3, z], Engine.Colour.Green, 1);
					Engine.Debug.DrawArrow3D(cam, light_pos, [x, y, z + 3], Engine.Colour.Blue, 1);
				};

				var light_x = 0, light_y = 10, light_z = 0;
				var update_light = function(info)
				{
					var radius = 20;
					// light_x = -11 + radius * Math.cos(info.elapsed_s) * Math.cos(info.elapsed_s);
					// light_y = ((1 + Math.sin(info.elapsed_s)) / 2) * radius;
					// light_z = radius * Math.sin(info.elapsed_s) * Math.cos(info.elapsed_s);
					// light_x = 0;
					// light_y = 0;
					// light_z = 0;
					if(Engine.Keyboard.IsPressed("w"))
					{
						light_z -= 0.1;
					}
					if(Engine.Keyboard.IsPressed("s"))
					{
						light_z += 0.1;
					}
					if(Engine.Keyboard.IsPressed("left"))
					{
						light_x -= 0.1;
					}
					if(Engine.Keyboard.IsPressed("right"))
					{
						light_x += 0.1;
					}
					if(Engine.Keyboard.IsPressed("up"))
					{
						light_y += 0.1;
					}
					if(Engine.Keyboard.IsPressed("down"))
					{
						light_y -= 0.1;
					}
					draw_light(light_x, light_y, light_z);
				};

				var on_render = function(info)
				{
					Engine.Gfx.Clear(Engine.Colour.Black);
					Engine.Gfx.SetDepthTestMode(Engine.GL.LESS, true);
					//Engine.Gfx.EnableWireframeMode(true);

					// Update & bind camera
					cam.Update(info);
					Engine.Gfx.BindCamera(cam);
					update_light(info);

					// Draw floor
					mat4.scale(mtx_trans, Engine.Math.IdentityMatrix, [100, 0, 100]);
					Engine.Gfx.BindShaderProgram(program_floor);
					Engine.Gfx.SetShaderConstant("u_trans_world", mtx_trans, Engine.Gfx.SC_MATRIX4);
					Engine.Gfx.DrawModel(model_floor);

					// Draw cubes
					var model_index = 0;
					for(var i = -5; i <= 5; ++i)
					{
						for(var j = -5; j <= 5; ++j)
						{
							mat4.translate(mtx_trans, Engine.Math.IdentityMatrix, [i * 3, 1.2, j * 3]);
							mat4.rotate(mtx_trans, mtx_trans, info.elapsed_s, [1, 1, 1]);

							var sun_ambient = $("#sun_ambient").spectrum("get").toRgb();
							sun_ambient.r /= 255; sun_ambient.g /= 255; sun_ambient.b /= 255;
							var sun_diffuse = $("#sun_diffuse").spectrum("get").toRgb();
							sun_diffuse.r /= 255; sun_diffuse.g /= 255; sun_diffuse.b /= 255;
							var sun_specular = $("#sun_specular").spectrum("get").toRgb();
							sun_specular.r /= 255; sun_specular.g /= 255; sun_specular.b /= 255;
							var material_colour = $("#material_colour").spectrum("get").toRgb();
							material_colour.r /= 255; material_colour.g /= 255; material_colour.b /= 255;
							var material_specular = $("#material_specular").spectrum("get").toRgb();
							material_specular.r /= 255; material_specular.g /= 255; material_specular.b /= 255;

							lighting_func(models[model_index++ % models.length], mtx_trans, [sun_ambient.r, sun_ambient.g, sun_ambient.b], [sun_diffuse.r, sun_diffuse.g, sun_diffuse.b], [sun_specular.r, sun_specular.g, sun_specular.b], [material_colour.r, material_colour.g, material_colour.b, material_colour.a], [material_specular.r, material_specular.g, material_specular.b, material_specular.a]);
						}
					}
				};
				return on_render;
			};
			Engine.Init(on_init, resources);
		});
		</script>
	</head>

	<body>
		<table style="width:100%">
			<tr>
				<td style="width:1000px;vertical-align:top"><canvas width="800" height="600"></canvas></td>
				<td id="param_editor_window" style="background-color:white;padding:20px;vertical-align:top">
					<h2>Lighting Model</h2>
					<select>
						<option value="simple-ambient-only">simple-ambient-only</option>
						<option value="simple-diffuse">simple-diffuse</option>
						<option value="simple-phong">simple-phong</option>
					</select>

					<h2>Material Properties</h2>
					Material colour<br/>
					<div id="material_colour"/></div><br/>
					Material specular<br/>					
					<div id="material_specular"/></div><br/>
					Shininess:
					<div id="material_shininess" style="width:200px"/>
					<br/>

					<h2>Global Light Properties</h2>
					Sun Ambient<br/>
					<div id="sun_ambient"></div><br/>
					Sun Diffuse<br/>
					<div id="sun_diffuse"></div><br/>
					Sun Specular<br/>
					<div id="sun_specular"></div>

					
				</td>
			</tr>
		</table>
	</body>
</html>