<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />

		<title>Engine Sample: Material Editor</title>

		<!-- EngineJS -->
		<script type="text/javascript" src="enginejs/jquery.js"></script>
		<script type="text/javascript" src="enginejs/engine.js"></script>
		<script type="text/javascript" src="enginejs/resources/libs/jquery-ui.js"></script>
		<script type="text/javascript" src="enginejs/resources/libs/jquery-ui.accordion.multiple.js"></script>
		<script type="text/javascript" src="enginejs/resources/libs/jquery-ui.ion.check/js/ion.checkRadio.min.js"></script>

		<!-- EngineJS App Framework -->
		<link rel='stylesheet' href='enginejs/resources/css/editor.css' />
		<link rel="stylesheet" href="enginejs/resources/css/third_party/jquery-ui/jquery-ui.css">
		<link rel="stylesheet" href="enginejs/resources/libs/jquery-ui.ion.check/css/ion.checkRadio.css">
		<link rel="stylesheet" href="enginejs/resources/libs/jquery-ui.ion.check/css/ion.checkRadio.dark.css">

		<!-- Spectrum colour picker -->
		<script src='enginejs/resources/misc/spectrum/spectrum.js'></script>
		<link rel='stylesheet' href='enginejs/resources/misc/spectrum/spectrum.css' />

		<script language="javascript">
		var resources =
		{
			mat_sponge        : { file : "mat/sponge.mat" },
			mat_wool          : { file : "mat/wool.mat" },
			mat_shiny_plastic : { file : "mat/shiny-plastic.mat" },
			mat_rusty_metal   : { file : "mat/rusty-metal.mat" },
			mat_shiny_metal   : { file : "mat/shiny-metal.mat" },
			mat_stone         : { file : "mat/stone.mat" },
			mat_wood          : { file : "mat/wood.mat" },
			mat_wood_shiny    : { file : "mat/wood-shiny.mat" },
			mat_snooker_ball  : { file : "mat/snooker-ball.mat" },
			mat_carpet        : { file : "mat/carpet.mat" },
			mdl_bunny         : { file : "model/stanford-bunny.obj", scale : 0.7, centre : true },
		};

		var do_resize = function()
		{
			var canvas = document.getElementsByTagName("canvas")[0];
			var width = canvas.clientWidth;
			var height = canvas.clientHeight;
			Engine.Canvas.Resize(width, height);
		};
		window.addEventListener('resize', do_resize);

		// ====================================================================================================================================
		// Light
		var model_rotation = 0;
		var sun =
		{
			position   : [0, 5, 0],
			angle      : 1,	// -90 --> 90 arc
			direction  : [0, -1, 0],
			ambient    : [ 0.6, 0.6, 0.6 ],
			colour     : [0.7, 0.7, 0.7],
			arc_radius : [30, 15],
			arc_lift   : 5
		};

		// ====================================================================================================================================
		// Materials
		var object_materials = [];
		var material_index = 0;

		var init_ui = function(init_lighting)
		{
			// Init / reset material albedo section
			$("#mat_albedo_colour").val("#ffffff");
			$("#mat_albedo_texture").val("");
			$("#mat_albedo_texture_repeat_x").spinner({ step: 0.5, numberFormat: "n", value : 1 });
			$("#mat_albedo_texture_repeat_y").spinner({ step: 0.5, numberFormat: "n", value : 1 });

			// Init / reset material specular section
			$("input[name='mat_specular_enabled']").ionCheckRadio();
			$("input[name='mat_specular_enabled']")[0].checked = false;
			$("input[name='mat_specular_enabled']").trigger("change");
			$("#mat_specular_colour").val("#ffffff");
			$("#mat_specular_shininess").slider({ min : 1, max : 100, value: 8 });
			$("#mat_specular_texture").val("");
			$("#mat_specular_texture_repeat_x").spinner({ step: 0.5, numberFormat: "n", value : 1 });
			$("#mat_specular_texture_repeat_y").spinner({ step: 0.5, numberFormat: "n", value : 1 });

			// Init / reset material normal section
			$("#mat_normal_texture").val("");
			$("#mat_normal_texture_repeat_x").spinner({ step: 0.5, numberFormat: "n", value : 1 });
			$("#mat_normal_texture_repeat_y").spinner({ step: 0.5, numberFormat: "n", value : 1 });

			// Init / reset material fresnel section
			$("input[name='mat_fresnel_enabled']").ionCheckRadio();
			$("input[name='mat_fresnel_enabled']")[0].checked = false;
			$("input[name='mat_fresnel_enabled']").trigger("change");
			$("#mat_fresnel_colour").val("#ffffff");
			$("#mat_fresnel_scale").slider({ min : 0, max : 100, value: 60 });
			$("#mat_fresnel_bias").slider({ min : 0, max : 100, value: 0 });
			$("#mat_fresnel_power").slider({ min : 0, max : 10, value: 5 });

			// Init / reset material reflection section
			$("input[name='mat_reflection_enabled']").ionCheckRadio();
			$("input[name='mat_reflection_enabled']")[0].checked = false;
			$("input[name='mat_reflection_enabled']").trigger("change");
			$("#mat_reflection_map").val("");
			$("#mat_reflection_amount").slider({ min : 0, max : 100, value: 50 });

			// Init / reset lighting section?
			if(init_lighting)
			{
				$("#ambient_light_intensity").slider({ min : 0, max : 100, value: 50 });
				$("#directional_light_intensity").slider({ min : 0, max : 100, value: 50 });
				$("#directional_light_angle").slider({ min : -90, max : 90, value: 45 });
			}

			// Init general section
			$("input[name='general_rotation_enabled']").ionCheckRadio();
			$("input[name='general_draw_skybox']").ionCheckRadio();
			$("#general_skybox_scale").slider({ min : 1, max : 60, value: 7 });
		};

		var populate_ui = function()
		{
			// Grab loaded material
			var mat = object_materials[material_index];

			// Update status bar
			$("#app_footer").text("Loaded: '" + mat.name + "' [ " + mat.descriptor.file + " ]");

			// Populate material albedo section
			if(Engine.Util.IsDefined(mat.properties.vec4.albedo_colour))
			{
				var hex_string = Engine.Colour.ToHex(mat.properties.vec4.albedo_colour);
				$("#mat_albedo_colour").val(hex_string);
			}
			if(Engine.Util.IsDefined(mat.properties.sampler2D.albedo_map) &&
				mat.properties.sampler2D.albedo_map != null)
			{
				$("#mat_albedo_texture").val(mat.properties.sampler2D.albedo_map.descriptor.file);
			}
			if(Engine.Util.IsDefined(mat.properties.vec2.albedo_map_repeat))
			{
				var albedo_repeat = mat.properties.vec2.albedo_map_repeat;
				$("#mat_albedo_texture_repeat_x").val(albedo_repeat[0]);
				$("#mat_albedo_texture_repeat_y").val(albedo_repeat[1]);
			}

			// Populate material specular section
			if(Engine.Util.IsDefined(mat.config.specular_enabled) && mat.config.specular_enabled)
			{
				$("input[name='mat_specular_enabled']")[0].checked = mat.config.specular_enabled;
				$("input[name='mat_specular_enabled']").trigger("change");

				if(Engine.Util.IsDefined(mat.properties.vec4.specular_colour))
				{
					var hex_string = Engine.Colour.ToHex(mat.properties.vec4.specular_colour);
					$("#mat_specular_colour").val(hex_string);
				}
				if(Engine.Util.IsDefined(mat.properties.float.specular_shininess))
				{
					$("#mat_specular_shininess").slider("option", "value", mat.properties.float.specular_shininess);
				}
				if(Engine.Util.IsDefined(mat.properties.sampler2D.specular_map) &&
					mat.properties.sampler2D.specular_map != null)
				{
					$("#mat_specular_texture").val(mat.properties.sampler2D.specular_map.descriptor.file);
				}
				if(Engine.Util.IsDefined(mat.properties.vec2.specular_map_repeat))
				{
					var specular_repeat = mat.properties.vec2.specular_map_repeat;
					$("#mat_specular_texture_repeat_x").val(specular_repeat[0]);
					$("#mat_specular_texture_repeat_y").val(specular_repeat[1]);
				}
			}

			// Populate material normal section
			if(Engine.Util.IsDefined(mat.properties.sampler2D.normal_map) &&
			   mat.properties.sampler2D.normal_map != null)
			{
				$("#mat_normal_texture").val(mat.properties.sampler2D.normal_map.descriptor.file);
			}
			if(Engine.Util.IsDefined(mat.properties.vec2.normal_map_repeat))
			{
				var normal_repeat = mat.properties.vec2.normal_map_repeat;
				$("#mat_normal_texture_repeat_x").val(normal_repeat[0]);
				$("#mat_normal_texture_repeat_y").val(normal_repeat[1]);
			}

			// Populate material fresnel section
			if(Engine.Util.IsDefined(mat.config.fresnel_enabled) && mat.config.fresnel_enabled)
			{
				$("input[name='mat_fresnel_enabled']")[0].checked = mat.config.fresnel_enabled;
				$("input[name='mat_fresnel_enabled']").trigger("change");

				if(Engine.Util.IsDefined(mat.properties.vec4.fresnel_colour))
				{
					var hex_string = Engine.Colour.ToHex(mat.properties.vec4.fresnel_colour);
					$("#mat_fresnel_colour").val(hex_string);
				}
				if(Engine.Util.IsDefined(mat.properties.float.fresnel_scale))
				{
					$("#mat_fresnel_scale").slider("option", "value", mat.properties.float.fresnel_scale);
				}
				if(Engine.Util.IsDefined(mat.properties.float.fresnel_bias))
				{
					$("#mat_fresnel_bias").slider("option", "value", mat.properties.float.fresnel_bias);
				}
				if(Engine.Util.IsDefined(mat.properties.float.fresnel_power))
				{
					$("#mat_fresnel_power").slider("option", "value", mat.properties.float.fresnel_power);
				}
			}

			// Populate material reflection section
			if(Engine.Util.IsDefined(mat.config.reflection_enabled) && mat.config.reflection_enabled)
			{
				$("input[name='mat_reflection_enabled']")[0].checked = mat.config.reflection_enabled;
				$("input[name='mat_reflection_enabled']").trigger("change");
				if(Engine.Util.IsDefined(mat.config.custom_reflection_map) && mat.config.custom_reflection_map)
				{
					$("#mat_reflection_map").val(mat.properties.samplerCube.reflection_map.descriptor.file);
				}
				else
				{
					$("#mat_reflection_map").val("[Engine Default]");
				}
				if(Engine.Util.IsDefined(mat.properties.float.reflection_amount))
				{
					$("#mat_reflection_amount").slider("option", "value", mat.properties.float.reflection_amount * 100);
				}
			}

			// Populate info section
			$("#info_name").val(mat.name);
			$("#info_type").val(mat.type);
			$("#info_path").val(mat.descriptor.file);
			$("#info_file_size").val(mat.descriptor.file_size + " bytes");
			$("#info_shader").val(mat.shader.descriptor.file);
		};

		var bind_ui = function()
		{
			// Grab loaded material
			var mat = object_materials[material_index];

			// Bind material data
			mat.SetColour("albedo_colour", Engine.Colour.FromHex($("#mat_albedo_colour").val()));
			mat.SetVector2("albedo_map_repeat", [ $("#mat_albedo_texture_repeat_x").val(), $("#mat_albedo_texture_repeat_y").val() ]);
			mat.SetConfig("specular_enabled", $("input[name='mat_specular_enabled']").is(":checked"));
			mat.SetColour("specular_colour", Engine.Colour.FromHex($("#mat_specular_colour").val()));
			mat.SetFloat("specular_shininess", [ $("#mat_specular_shininess").slider("values", 0) ]);
			mat.SetVector2("specular_map_repeat", [ $("#mat_specular_texture_repeat_x").val(), $("#mat_specular_texture_repeat_y").val() ]);
			mat.SetVector2("normal_map_repeat", [ $("#mat_normal_texture_repeat_x").val(), $("#mat_normal_texture_repeat_y").val() ]);
			mat.SetConfig("fresnel_enabled", $("input[name='mat_fresnel_enabled']").is(":checked"));
			mat.SetColour("fresnel_colour", Engine.Colour.FromHex($("#mat_fresnel_colour").val()));
			mat.SetFloat("fresnel_scale", [ $("#mat_fresnel_scale").slider("values", 0) / 100 ]);
			mat.SetFloat("fresnel_bias", [ $("#mat_fresnel_bias").slider("values", 0) / 100 ]);
			mat.SetFloat("fresnel_power", [ $("#mat_fresnel_power").slider("values", 0) ]);
			mat.SetConfig("reflection_enabled", $("input[name='mat_reflection_enabled']").is(":checked"));
			mat.SetFloat("reflection_amount", [ $("#mat_reflection_amount").slider("values", 0) / 100 ]);

			// Bind light position
			sun.angle = $("#directional_light_angle").slider("values", 0);
			sun.position[2] = Math.sin(Engine.Math.DegToRad(sun.angle)) * sun.arc_radius[0];
			sun.position[1] = sun.arc_lift + Math.cos(Engine.Math.DegToRad(sun.angle)) * sun.arc_radius[1];
			sun.position[0] = 0;

			// Update light direction
			var len = Math.sqrt((sun.position[2] * sun.position[2]) + (sun.position[1]  * sun.position[1]));
			sun.direction = [ -sun.position[0] / len, -sun.position[1] / len, sun.position[2] / len ];

			// Bind light ambient properties
			var amb_intensity = $("#ambient_light_intensity").slider("values", 0);
			var ambient_directional_light_colour = Engine.Colour.FromHex($("#ambient_directional_light_colour").val());
			sun.ambient[0] = ambient_directional_light_colour[0] * (amb_intensity / 100);
			sun.ambient[1] = ambient_directional_light_colour[1] * (amb_intensity / 100);
			sun.ambient[2] = ambient_directional_light_colour[2] * (amb_intensity / 100);

			// Bind light directional properties
			var light_intensity = $("#directional_light_intensity").slider("values", 0);
			var directional_light_colour = Engine.Colour.FromHex($("#directional_light_colour").val());
			sun.colour[0] = directional_light_colour[0] * (light_intensity / 100);
			sun.colour[1] = directional_light_colour[1] * (light_intensity / 100);
			sun.colour[2] = directional_light_colour[2] * (light_intensity / 100);

			// Rotate?
			if($("input[name='general_rotation_enabled']").is(":checked"))
			{
				model_rotation += Engine.Time.delta_s / 3.0;
			}
		};

		$(document).ready(function()
		{
			var on_init = function()
			{
				// ====================================================================================================================================
				// Misc
				var mtx_trans = mat4.create();
				var model_index = 0;
				do_resize();
				Engine.Canvas.EnableContextMenu(false);

				object_materials =
				[
					resources["mat_sponge"],
					resources["mat_carpet"],
					resources["mat_shiny_plastic"],
					resources["mat_rusty_metal"],
					resources["mat_shiny_metal"],
					resources["mat_wool"],
					resources["mat_wood"],
					resources["mat_wood_shiny"],
					resources["mat_stone"],
					resources["mat_snooker_ball"],
				];

				// ====================================================================================================================================
				// Populate UI
				populate_ui();

				// ====================================================================================================================================
				// Models
				var object_models =
				[
					Engine.Geometry.MakeSphere(),
					Engine.Resources["mdl_cube"],
					resources["mdl_bunny"]
				];
				var model_index = 0;

				// ====================================================================================================================================
				// Camera
				var cam = new Engine.Camera.Perspective({ position: [0, 0, -3] });
				cam.AttachHelper(new Engine.Camera.Helper.Orbit(
				{
					look_at : [0, 0, 0],
					radius  : [3, 1.5, 10],
					angles  : [90, 0],
					min_y   : -(Math.PI / 2) - 0.2,
					max_y   : (Math.PI / 2) - 0.1
				}));

				// ====================================================================================================================================
				// Light
				Engine.Gfx.SetDirectionalLight(sun);

				var on_render = function()
				{
					// Clear
					Engine.Gfx.Clear(Engine.Colour.Black);
					Engine.Gfx.SetDepthTestMode(Engine.GL.LESS, true);

					// Update & bind camera
					cam.Update();
					Engine.Gfx.BindCamera(cam);

					// Bind data from UI
					bind_ui();

					if(Engine.Keyboard.IsPressed("t", true))
					{
						model_index = (model_index + 1) % object_models.length;
					}

					if(Engine.Keyboard.IsPressed("m", true))
					{
						material_index = (material_index + 1) % object_materials.length;
						init_ui(false);
						populate_ui();
					}

					// Draw model
					var model = object_models[model_index];
					mat4.translate(mtx_trans, Engine.Math.IdentityMatrix, [0, 0, 0]);
					mat4.rotate(mtx_trans, mtx_trans, model_rotation, [0, 1, 0]);
					var active_material = object_materials[material_index];
					Engine.Gfx.BindMaterial(active_material);
					Engine.Gfx.DrawModel(model, mtx_trans, false, false);

					// Draw kybox
					var draw_skybox = active_material.config.reflection_enabled &&
					                  $("input[name='general_draw_skybox']").is(":checked");
					if(draw_skybox)
					{
						var has_custom_reflection_map = Engine.Util.IsDefined(active_material.config.custom_reflection_map) &&
						                                active_material.config.custom_reflection_map != null;
						var skybox_texture = has_custom_reflection_map? active_material.properties.samplerCube.reflection_map : null;
						var skybox_scale = $("#general_skybox_scale").slider("values", 0);
						Engine.Gfx.DrawSkybox(skybox_scale, skybox_texture);
					}
				};
				return on_render;
			};

			// Initialise UI
			$("#accordion").accordion({ multiple: true, collapsible : true, animate: 50, heightStyle: "content" });
			for(var i = 0; i < 4; ++i)
			{
				$("#accordion").accordion('option', 'active' , i);
			}
			init_ui(true);

			// Initialise engine
			Engine.Init(on_init, resources);
		});

		</script>
	</head>

	<body>
		<div class="header row">
			<h2 style="margin:0px; margin-top:0px; margin-left:5px; padding:0px; font-family: Segoe UI,Arial,sans-serif; float:left; width:200px;">Material Editor</h2>
		</div>

		<div class="body row">
			<div class="left col">
				<canvas style="margin:0px; width:100%; height:100%; vertical-align: bottom"></canvas>
			</div>
			<div class="right col scroll-y" style="color:blue">
				<div id="accordion">
					<h3 class="editor_section_heading">Material</h3>
					<div class="editor_section">
						<h4>Albedo</h4>
						<div class="editor_row">
							<div class="editor_label">Colour:</div>
							<input id="mat_albedo_colour" type="color" value="#ffffff"/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Texture:</div>
							<input id="mat_albedo_texture" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Texture Repeat:</div>
							<input id="mat_albedo_texture_repeat_x" class="editor_float_small" value="1.00">
							<input id="mat_albedo_texture_repeat_y" class="editor_float_small" value="1.00">
						</div>

						<br/>
						<h4>Specular</h4>
						<div class="editor_row">
							<div class="editor_label">Enabled:</div>
							<label><input type="checkbox" name="mat_specular_enabled"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Colour:</div>
							<input id="mat_specular_colour" type="color" value="#ffffff"/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Shininess:</div>
							<div id='mat_specular_shininess' class="editor_slider"></div>
						</div>
						<div class="editor_row">
							<div class="editor_label">Texture:</div>
							<input id="mat_specular_texture" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Texture Repeat:</div>
							<input id="mat_specular_texture_repeat_x" class="editor_float_small" value="1.00">
							<input id="mat_specular_texture_repeat_y" class="editor_float_small" value="1.00">
						</div>

						<br/>
						<h4>Normal</h4>
						<div class="editor_row">
							<div class="editor_label">Texture:</div>
							<input id="mat_normal_texture" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Texture Repeat:</div>
							<input id="mat_normal_texture_repeat_x" class="editor_float_small" value="1.00">
							<input id="mat_normal_texture_repeat_y" class="editor_float_small" value="1.00">
						</div>

						<br/>
						<h4>Fresnel</h4>
						<div class="editor_row">
							<div class="editor_label">Enabled:</div>
							<label><input type="checkbox" name="mat_fresnel_enabled"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Colour:</div>
							<input id="mat_fresnel_colour" type="color" value="#ffffff"/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Scale:</div>
							<div id='mat_fresnel_scale' class="editor_slider"></div>
						</div>
						<div class="editor_row">
							<div class="editor_label">Bias:</div>
							<div id='mat_fresnel_bias' class="editor_slider"></div>
						</div>
						<div class="editor_row">
							<div class="editor_label">Power:</div>
							<div id='mat_fresnel_power' class="editor_slider"></div>
						</div>

						<br/>
						<h4>Reflection</h4>
						<div class="editor_row">
							<div class="editor_label">Enabled:</div>
							<label><input type="checkbox" name="mat_reflection_enabled"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Texture:</div>
							<input id="mat_reflection_map" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Amount:</div>
							<div id='mat_reflection_amount' class="editor_slider"></div>
						</div>
					</div>

					<h3 class="editor_section_heading">Lighting</h3>
					<div class="editor_section">
						<h4>Ambient Light</h4>
						<div class="editor_row">
							<div class="editor_label">Ambient Colour:</div>
							<input id="ambient_directional_light_colour" type="color" value="#ffffff"/>
						</div>

						<div class="editor_row">
							<div class="editor_label">Ambient Intensity:</div>
							<div id='ambient_light_intensity' class="editor_slider"></div>
						</div>

						<br/>
						<h4>Directional Light</h4>
						<div class="editor_row">
							<div class="editor_label">Light Colour:</div>
							<input id="directional_light_colour" type="color" value="#ffffff"/>
						</div>

						<div class="editor_row">
							<div class="editor_label">Light Intensity:</div>
							<div id='directional_light_intensity' class="editor_slider"></div>
						</div>

						<div class="editor_row">
							<div class="editor_label">Light Angle:</div>
							<div id='directional_light_angle' class="editor_slider"></div>
						</div>
					</div>

					<h3 class="editor_section_heading">General</h3>
					<div class="editor_section">
						<div class="editor_row">
							<div class="editor_label">Enable Rotation</div>
							<label><input type="checkbox" name="general_rotation_enabled"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Draw Reflection Map</div>
							<label><input type="checkbox" name="general_draw_skybox"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Reflection Map Scale:</div>
							<div id='general_skybox_scale' class="editor_slider"></div>
						</div>
					</div>

					<h3 class="editor_section_heading">Info</h3>
					<div class="editor_section">
						<div class="editor_row">
							<div class="editor_label">Name:</div>
							<input id="info_name" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Type:</div>
							<input id="info_type" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Path:</div>
							<input id="info_path" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">File Size:</div>
							<input id="info_file_size" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Shader:</div>
							<input id="info_shader" type="text" disabled/>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div id="app_footer" class="footer row">
			Loading...
		</div>
	</body>
</html>