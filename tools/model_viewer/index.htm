<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />

		<title>Engine Sample: Model Viewer</title>

		<!-- EngineJS -->
		<script type="text/javascript" src="enginejs/jquery.js"></script>
		<script type="text/javascript" src="enginejs/engine.js"></script>
		<script type="text/javascript" src="enginejs/resources/libs/jquery-ui.js"></script>
		<script type="text/javascript" src="enginejs/resources/libs/jquery-ui.accordion.multiple.js"></script>
		<script type="text/javascript" src="enginejs/resources/libs/jquery-ui.ion.check/js/ion.checkRadio.min.js"></script>

		<!-- EngineJS App Framework -->
		<link rel='stylesheet' href='enginejs/resources/css/editor.css' />
		<link rel="stylesheet" href="enginejs/resources/css/third_party/jquery-ui/jquery-ui.css">
		<link rel="stylesheet" href="enginejs/resources/libs/jquery-ui.ion.check/css/ion.checkRadio.css">
		<link rel="stylesheet" href="enginejs/resources/libs/jquery-ui.ion.check/css/ion.checkRadio.dark.css">

		<!-- Spectrum colour picker -->
		<script src='enginejs/resources/misc/spectrum/spectrum.js'></script>
		<link rel='stylesheet' href='enginejs/resources/misc/spectrum/spectrum.css' />

		<script language="javascript">
		var resources =
		{
			mat_floor         : { file : "mat/floor.mat"},
			mat_shadow        : { file : "mat/shadow.mat"},

			mdl_ring          : { file : "model/ring/ring.obj", scale : 12 },
			mdl_key           : { file : "model/key/Key_B_02.obj", scale : 0.5 },
			mdl_bear          : { file : "model/bear/bear.obj", scale : 0.12, centre : true },
			mdl_dummy         : { file : "model/dummy/dummy.obj", scale : 0.013 },
			mdl_bunny         : { file : "model/bunny/stanford-bunny.obj", scale : 0.75, centre : true },
			mdl_f16           : { file : "model/f16/f16.obj", scale : 2.3, centre : true },
			mdl_tree          : { file : "model/tree/OC41_1.obj", scale : 7, rotate : [ -90, 0, 0 ] },

			mdl_cube_sponge   : { file : "enginejs/resources/models/cube-sponge.model", rotate : [ 0, 45, 0 ] },
		};

		var model_index = 0;
		var object_models = [ ];
		var model_rotation = 0;

		// ====================================================================================================================================
		// Light
		var cam = null; // initialised in populate_ui

		// ====================================================================================================================================
		// Light
		var sun =
		{
			position   : [0, 5, 0],
			angle      : 1,	// -90 --> 90 arc
			direction  : [0, -1, 0],
			ambient   : [ 0.6, 0.6, 0.6 ],
			colour     : [0.7, 0.7, 0.7],
			arc_radius : [30, 15],
			arc_lift   : 5
		};

		var do_resize = function()
		{
			var canvas = document.getElementsByTagName("canvas")[0];
			var width = canvas.clientWidth;
			var height = canvas.clientHeight;
			Engine.Canvas.Resize(width, height);
		};
		window.addEventListener('resize', do_resize);

		var init_ui = function(init_lighting)
		{
			// Init / reset lighting section?
			if(init_lighting)
			{
				$("#ambient_light_intensity").slider({ min : 0, max : 100, value: 65 });
				$("#directional_light_intensity").slider({ min : 0, max : 100, value: 50 });
				$("#directional_light_angle").slider({ min : -90, max : 90, value: 45 });
			}

			// Init general section
			$("input[name='general_rotation_enabled']").ionCheckRadio();
			$("input[name='general_draw_floor']").ionCheckRadio();
			$("input[name='general_draw_floor']")[0].checked = true;
			$("input[name='general_draw_normals']").ionCheckRadio();
			$("input[name='general_draw_tangents']").ionCheckRadio();
			$("input[name='general_draw_axis']").ionCheckRadio();
			$("input[name='general_draw_shadow_map_preview']").ionCheckRadio();
			$("input[name='general_draw_shadow_map_preview']")[0].checked = true;
			$("input[name='general_draw_skybox']").ionCheckRadio();
			$("#general_skybox_scale").slider({ min : 1, max : 60, value: 7 });
		};

		var populate_ui = function()
		{
			// Grab loaded model
			var model = object_models[model_index];

			// Update status bar
			var has_descriptor = Engine.Util.IsDefined(model.descriptor);
			var model_file_path = has_descriptor? model.descriptor.file : "None";
			$("#app_footer").text("Loaded: '" + model.name + "' [ " + model_file_path + " ]");

			// Populate info section
			$("#info_name").val(model.name);
			$("#info_import_format").val(model.import_format);
			$("#info_path").val(model_file_path);
			$("#info_file_size").val((has_descriptor? model.descriptor.file_size : 0) + " bytes");

			// Reset camera to centre about model centre
			cam = new Engine.Camera.Perspective({ position: [0, 0, 0] });
			cam.AttachHelper(new Engine.Camera.Helper.Orbit(
			{
				look_at : [0, (model.max_vert[1] - model.min_vert[1]) * 0.5, 0],
				radius  : [5.5, 1.5, 10],
				angles  : [1.58, 0.477],
				min_y   : -(Math.PI / 2) - 0.2,
				max_y   : (Math.PI / 2) - 0.1
			}));
		};

		var bind_ui = function()
		{
			// Bind light position
			sun.angle = $("#directional_light_angle").slider("values", 0);
			sun.position[2] = Math.sin(Engine.Math.DegToRad(sun.angle)) * sun.arc_radius[0];
			sun.position[1] = sun.arc_lift + Math.cos(Engine.Math.DegToRad(sun.angle)) * sun.arc_radius[1];
			sun.position[0] = 0;

			// Update light direction
			var len = Math.sqrt((sun.position[2] * sun.position[2]) + (sun.position[1]  * sun.position[1]));
			sun.direction = [ -sun.position[0] / len, -sun.position[1] / len, sun.position[2] / len ];

			// Bind light ambient properties
			var amb_intensity = $("#ambient_light_intensity").slider("values", 0);
			var ambient_directional_light_colour = Engine.Colour.FromHex($("#ambient_directional_light_colour").val());
			sun.ambient[0] = ambient_directional_light_colour[0] * (amb_intensity / 100);
			sun.ambient[1] = ambient_directional_light_colour[1] * (amb_intensity / 100);
			sun.ambient[2] = ambient_directional_light_colour[2] * (amb_intensity / 100);

			// Bind light directional properties
			var light_intensity = $("#directional_light_intensity").slider("values", 0);
			var directional_light_colour = Engine.Colour.FromHex($("#directional_light_colour").val());
			sun.colour[0] = directional_light_colour[0] * (light_intensity / 100);
			sun.colour[1] = directional_light_colour[1] * (light_intensity / 100);
			sun.colour[2] = directional_light_colour[2] * (light_intensity / 100);

			// Rotate?
			if($("input[name='general_rotation_enabled']").is(":checked"))
			{
				model_rotation += Engine.Time.delta_s / 3.0;
			}
		};

		$(document).ready(function()
		{
			var on_init = function()
			{
				// ====================================================================================================================================
				// Misc
				var mtx_trans = mat4.create();
				do_resize();
				Engine.Canvas.EnableContextMenu(false);
				Engine.Gfx.SetDirectionalLight(sun);

				// ====================================================================================================================================
				// Shadows
				var shadow_type = 2;
				var shadow_rt = Engine.Gfx.CreateRenderTarget("Shadow", 1024, 1024, true);
				var shadow_cam = new Engine.Camera.Orthographic({ size : [200, 200] });
				var shadow_preview_size = [100, 100];
				var shadow_preview_padding = [10, 10];
				var shadow_preview_cam = new Engine.Camera.Orthographic();
				var shadow_preview_program = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_transformed_uv_flipped"],
				                             Engine.Resources["fs_unlit_textured"]);

				// ====================================================================================================================================
				// Models
				var floor_model = Engine.Resources["mdl_floor_tile"];
				object_models =
				[
					// Wavefront .obj files
					resources["mdl_f16"],
					resources["mdl_ring"],
					resources["mdl_key"],
					resources["mdl_bear"],
					resources["mdl_dummy"],
					resources["mdl_bunny"],
					resources["mdl_tree"],

					// Custom EngineJS model
					resources["mdl_cube_sponge"],

					// Built-in resources
					Engine.Geometry.MakeSphere(),
					Engine.Resources["mdl_cube"]
				];

				populate_ui();

				function update_light()
				{
					// Process gamepad input
					sun.angle += Engine.Keyboard.IsPressed("u")? -1 : (Engine.Keyboard.IsPressed("i")? 1 : 0);
					var gamepad = Engine.Gamepad.Pads[0];
					if(gamepad)
					{
						if(gamepad.IsPressed("lt"))
						{
							sun.colour[0] -= 0.01;
							sun.colour[1] -= 0.01;
							sun.colour[2] -= 0.01;
						}
						if(gamepad.IsPressed("rt"))
						{
							sun.colour[0] += 0.01;
							sun.colour[1] += 0.01;
							sun.colour[2] += 0.01;
						}
					}
				};

				var DrawModel = function(model, override_material)
				{
					// Position on grid
					mat4.translate(mtx_trans, Engine.Math.IdentityMatrix, [0, -model.min_vert[1], 0]);

					// Rotate
					mat4.rotate(mtx_trans, mtx_trans, model_rotation, [0, 1, 0]);

					// Draw model
					if(override_material == null)
					{
						// Main render pass | Normal draw with shadow sampling enabled
						Engine.Gfx.SetShadowParams(shadow_rt, shadow_type, shadow_cam.mtx_view_proj);
						Engine.Gfx.DrawModel(model, mtx_trans);

						// Debug draw normals?
						if($("input[name='general_draw_normals']").is(":checked"))
						{
							model.DebugDrawNormals(cam, mtx_trans);
						}

						// Debug draw tangents?
						if($("input[name='general_draw_tangents']").is(":checked"))
						{
							model.DebugDrawTangents(cam, mtx_trans);
						}

						// Debug draw axis?
						if($("input[name='general_draw_axis']").is(":checked"))
						{
							var axis_draw_length = 5.0;
							model.DebugDrawAxis(cam, mtx_trans, axis_draw_length);
						}
					}
					else
					{
						// Shadow pass | Uses custom shadow material, with shadow sampling disabled
						Engine.Gfx.BindMaterial(override_material, false);
						Engine.Gfx.DrawModel(model, mtx_trans, false, false);
					}
				}

				var RenderMainPass = function()
				{
					// Clear
					Engine.Gfx.Clear(Engine.Colour.Black);
					Engine.Gfx.SetDepthTestMode(Engine.GL.LESS, true);

					// Update & bind camera
					cam.Update();
					Engine.Gfx.BindCamera(cam);

					// Update light
					update_light();

					if(Engine.Keyboard.IsPressed("m", true))
					{
						model_index = (model_index + 1) % object_models.length;
						populate_ui();
					}

					// Draw floor?
					if($("input[name='general_draw_floor']").is(":checked"))
					{
						mat4.scale(mtx_trans, Engine.Math.IdentityMatrix, [100, 1, 100]);
						Engine.Gfx.SetShadowParams(shadow_rt, shadow_type, shadow_cam.mtx_view_proj);
						Engine.Gfx.BindMaterial(resources["mat_floor"], true);
						Engine.Gfx.DrawModel(floor_model, mtx_trans, false, true);
					}

					// Draw loaded model
					DrawModel(object_models[model_index]);
				};

				var RenderShadowPass = function()
				{
					Engine.Gfx.BindRenderTarget(shadow_rt);
					var lookat = [0, 0, 0];
					Engine.Gfx.Clear(Engine.Colour.Blue);
					shadow_cam.Update();

					// fix this manual code
					mat4.lookAt(shadow_cam.mtx_view, sun.position, lookat, [0, 0, 1]);
					mat4.ortho(shadow_cam.mtx_proj,-10, 10, -10, 10, -10, 80);
					mat4.multiply(shadow_cam.mtx_view_proj, shadow_cam.mtx_proj, shadow_cam.mtx_view);
					mat4.invert(shadow_cam.mtx_view_inverse, shadow_cam.mtx_view);

					Engine.Gfx.BindCamera(shadow_cam);

					DrawModel(object_models[model_index], resources["mat_shadow"]);

					Engine.Gfx.UnBindRenderTarget(shadow_rt);
				};

				var on_render = function()
				{
					// Bind UI
					bind_ui();

					// Shadow pass
					RenderShadowPass();

					// Main render pass
					RenderMainPass();

					if(Engine.Keyboard.IsPressed("l", true))
					{
						shadow_type = (shadow_type + 1) % 3;
					}

					// Shadow map preview?
					if($("input[name='general_draw_shadow_map_preview']").is(":checked"))
					{
						shadow_preview_cam.Update();
						Engine.Gfx.BindCamera(shadow_preview_cam);
						Engine.Gfx.BindShaderProgram(shadow_preview_program);
						mat4.translate(mtx_trans, Engine.Math.IdentityMatrix, [ Engine.Canvas.GetWidth() - shadow_preview_size[0] - shadow_preview_padding[0], Engine.Canvas.GetHeight() - shadow_preview_size[1] - shadow_preview_padding[1], 0]);
						mat4.scale(mtx_trans, mtx_trans, [shadow_preview_size[0], shadow_preview_size[1], 0.0]);
						Engine.Gfx.SetShaderProperty("u_trans_world", mtx_trans, Engine.Gfx.SP_MATRIX4);
						Engine.Gfx.BindTexture(shadow_rt.depth_texture, 0);
						Engine.Gfx.DrawQuad();
					}
				};
				return on_render;
			};

			// Initialise UI
			$("#accordion").accordion({ multiple: true, collapsible : true, animate: 50, heightStyle: "content" });
			for(var i = 0; i < 3; ++i)
			{
				$("#accordion").accordion('option', 'active' , i);
			}
			init_ui(true);

			Engine.Init(on_init, resources);
		});
		</script>
	</head>

	<body>
		<div class="header row">
			<h2 style="margin:0px; margin-top:0px; margin-left:5px; padding:0px; font-family: Segoe UI,Arial,sans-serif; float:left; width:200px;">Model Viewer</h2>
		</div>

		<div class="body row">
			<div class="left col">
				<canvas style="margin:0px; width:100%; height:100%; vertical-align: bottom"></canvas>
			</div>
			<div class="right col scroll-y" style="color:blue">
				<div id="accordion" class="editor_accordion">
					<h3 class="editor_section_heading">Lighting</h3>
					<div class="editor_section">
						<h4>Ambient Light</h4>
						<div class="editor_row">
							<div class="editor_label">Ambient Colour:</div>
							<input id="ambient_directional_light_colour" type="color" value="#ffffff"/>
						</div>

						<div class="editor_row">
							<div class="editor_label">Ambient Intensity:</div>
							<div id='ambient_light_intensity' class="editor_slider"></div>
						</div>

						<br/>
						<h4>Directional Light</h4>
						<div class="editor_row">
							<div class="editor_label">Light Colour:</div>
							<input id="directional_light_colour" type="color" value="#ffffff"/>
						</div>

						<div class="editor_row">
							<div class="editor_label">Light Intensity:</div>
							<div id='directional_light_intensity' class="editor_slider"></div>
						</div>

						<div class="editor_row">
							<div class="editor_label">Light Angle:</div>
							<div id='directional_light_angle' class="editor_slider"></div>
						</div>
					</div>

					<h3 class="editor_section_heading">General</h3>
					<div class="editor_section">
						<div class="editor_row">
							<div class="editor_label">Enable Rotation</div>
							<label><input type="checkbox" name="general_rotation_enabled"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Draw Floor</div>
							<label><input type="checkbox" name="general_draw_floor"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Draw Normals</div>
							<label><input type="checkbox" name="general_draw_normals"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Draw Tangents</div>
							<label><input type="checkbox" name="general_draw_tangents"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Draw Model Axis</div>
							<label><input type="checkbox" name="general_draw_axis"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Draw Shadow Map</div>
							<label><input type="checkbox" name="general_draw_shadow_map_preview"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Draw Reflection Map</div>
							<label><input type="checkbox" name="general_draw_skybox"></label>
						</div>
						<div class="editor_row">
							<div class="editor_label">Reflection Map Scale:</div>
							<div id='general_skybox_scale' class="editor_slider"></div>
						</div>
					</div>

					<h3 class="editor_section_heading">Info</h3>
					<div class="editor_section">
						<div class="editor_row">
							<div class="editor_label">Name:</div>
							<input id="info_name" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Import Format:</div>
							<input id="info_import_format" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">Path:</div>
							<input id="info_path" type="text" disabled/>
						</div>
						<div class="editor_row">
							<div class="editor_label">File Size:</div>
							<input id="info_file_size" type="text" disabled/>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div id="app_footer" class="footer row">
			Loading...
		</div>
	</body>
</html>