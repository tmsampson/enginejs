<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		
		<title>Shader Joy</title>

		<!-- EngineJS -->
		<script type="text/javascript" src="enginejs/jquery.js"></script>
		<script type="text/javascript" src="enginejs/engine.js"></script>

		<!-- Shader Joy -->
		<link rel="stylesheet" href="style/shaderjoy.css"/>

		<!-- Spectrum -->
		<script src='resources/spectrum/spectrum.js'></script>
		<link rel='stylesheet' href='resources/spectrum/spectrum.css' />

		<!-- Codemirror -->
		<script src="enginejs/resources/misc/codemirror/lib/codemirror.js"></script>
		<script src="enginejs/resources/misc/codemirror/mode/clike/clike.js"></script>
		<link rel="stylesheet" href="enginejs/resources/misc/codemirror/lib/codemirror.css"/>
		<link rel="stylesheet" href="enginejs/resources/misc/codemirror/theme/mdn-like.css"/>

		<script language="javascript">
		var resources =
		{
			fs_plasma    : { file: "shaders/plasma.fs"         },
			txt_template : { file: "resources/template.fs.txt" },
			txt_new      : { file: "resources/new.fs.txt"      },
		};

		var template_code = "";
		var editor = null; 
		var shader_toy_ids = [];
		var shader_toy_index = -1;
		var program = null;

		function StartNewShader()
		{
			var code = resources["txt_new"].text;
			editor.setValue(code);
			RecompileShader(code);
		}

		function NextShaderToy(index)
		{
			shader_toy_index = (shader_toy_index + index) % (shader_toy_ids.length -1);
			var get_id = shader_toy_ids[shader_toy_index];

			Engine.Net.FetchResource("https://www.shadertoy.com/api/v1/shaders/" + get_id + "?key=ftHKwr", function(data)
			{
				var code = data.Shader.renderpass[0].code;
				editor.setValue(code);
				RecompileShader(code);
			});
		}

		function RandomShaderToy()
		{
			shader_toy_index = Engine.Math.RandomInteger(0, shader_toy_ids.length -1);
			var get_id = shader_toy_ids[shader_toy_index];

			Engine.Net.FetchResource("https://www.shadertoy.com/api/v1/shaders/" + get_id + "?key=ftHKwr", function(data)
			{
				var code = data.Shader.renderpass[0].code;
				editor.setValue(code);
				RecompileShader(code);
			});
		}

		function GetColours()
		{
			var colours = [];
			for(var i = 0; i < 4; ++i)
			{
				var c = $("#colour" + i).spectrum("get").toRgb();
				colours.push(c.r / 255); colours.push(c.g / 255);
				colours.push(c.b / 255); colours.push(c.a / 255);
			}
			return colours;
		}

		$(document).ready(function()
		{
			var ShowTab = function(sender, tab) { $(".tab-content").hide(); $(".tab").removeClass("tab-active"); $("." + tab).show(); $(sender).addClass("tab-active"); };
			$("#tab-usage").on('click', function() { ShowTab(this, "usage"); });
			$("#tab-colour").on('click', function() { ShowTab(this, "colour"); });
			$("#tab-tweaker").on('click', function() { ShowTab(this, "tweaker"); });
			$("#tab-about").on('click', function() { ShowTab(this, "about"); });

			editor = CodeMirror.fromTextArea(document.getElementById("textarea-code"),
			{
				lineNumbers   : true,
				matchBrackets : true,
				autofocus     : true,
				mode          : "x-shader/x-fragment",
				theme         : "mdn-like",
				extraKeys     :
				{
					"Alt-Enter" : function(instance) { RecompileShader(editor.getValue()); return true; },
					"Ctrl-U" : function(instance) { NextShaderToy(-1); return true; },
					"Ctrl-I" : function(instance) { NextShaderToy(1); return true; },
					"Ctrl-Q" : function(instance) { RandomShaderToy(1); return true; },
					"Ctrl-N" : function(instance) { StartNewShader(); return true; }
				}
			});

			// Setup and trigger layout update
			$(window).resize(function()
			{
				var h = $(".content").height();
				$(".CodeMirror").height(h-30);
				editor.refresh()
				$(".tab-content-container").height(h - 450 - 50 - 6 - 20);
			}).trigger('resize');

			var click_pos = [0, 0];
			var mpos = [0, 0];
			var param_editor = null;

			var on_init = function()
			{
				// API
				Engine.Net.FetchResource("https://www.shadertoy.com/api/v1/shaders?key=ftHKwr", function(data)
				{
					shader_toy_ids = data.Results;
				});

				Engine.Net.FetchResource("resources/help.htm", function(data)
				{
					$(".tab-content.usage").html(data);
				});

				Engine.Net.FetchResource("resources/colour.htm", function(data)
				{
					$(".tab-content.colour").html(data);
				});

				Engine.Net.FetchResource("resources/about.htm", function(data)
				{
					$(".tab-content.about").html(data);
				});

				template_code = resources["txt_template"].text;
				program  = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_basic"],
				                                              resources["fs_plasma"]);
				//param_editor = Engine.Editor.BuildParamEditor(resources["fs_plasma"]);

				RecompileShader(editor.getValue());

				var on_render = function(info)
				{
					Engine.Gfx.BindShaderProgram(program);
					Engine.Gfx.SetShaderConstant("iGlobalTime", info.elapsed_s, Engine.Gfx.SC_FLOAT);
					var res = [ 800, 450, 0 ];
					Engine.Gfx.SetShaderConstant("iResolution", res, Engine.Gfx.SC_VEC3);

					Engine.Editor.BindParamEditor($(".tab-content.tweaker")); // Bind sliders

					var mpressed = false;
					if(Engine.Mouse.IsPressed())
					{
						mpos = Engine.Mouse.GetPosition();
						mpressed = true;
					}
					if(Engine.Mouse.IsPressed("left", true))
					{
						click_pos = mpos;
					}

					var mouse = [ mpos[0], mpos[1], mpressed? click_pos[0] : -click_pos[0], mpressed? click_pos[1] : -click_pos[1] ];
					Engine.Gfx.SetShaderConstant("iMouse", mouse, Engine.Gfx.SC_VEC4);

					// Colours
					Engine.Gfx.SetShaderConstant("iColour", GetColours(), Engine.Gfx.SC_VEC4_ARRAY);
					Engine.Gfx.DrawQuad();
				};
				return on_render;
			};
			Engine.Init(on_init, resources);
		});

		function RecompileShader(user_code)
		{
			var code = template_code + "\n\n" + user_code;
			// editor.setValue(code);
			var shader = Engine.Gfx.CompileFragmentShader(code, []);
			program = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_basic"], shader);

			// sliders
			param_editor = Engine.Editor.BuildParamEditor(shader);
			$(".tab-content.tweaker").empty();
			$(".tab-content.tweaker").append(param_editor);
		}

		</script>
	</head>

	<body>
		<div class="box">

		<div class="row header"><img class="logo" src="img/logo.png"/></div>

		<div class="row content">
			<div class="content-left">
				<canvas width="800" height="450"></canvas>
				<div class="tab-container">
					<div class="tabs">
						<div id="tab-usage" class="tab tab-active">
							Usage
						</div>
						<div id="tab-colour" class="tab">
							Colour
						</div>
						<div id="tab-tweaker" class="tab">
							Tweaker
						</div>
						<div id="tab-about" class="tab">
							About
						</div>
					</div>
					<div class="tab-content-container">
						<div class="tab-content usage">
						</div>
						<div class="tab-content colour">
							Colour here
						</div>
						<div class="tab-content tweaker">
							Tweaker here
						</div>
						<div class="tab-content about">
							About here
						</div>
					</div>
				</div>
			</div>

			<div style="overflow:hidden; flex: 1 1 auto; margin: 0px 0px; background-color:black">
					<div class="toolbar">
						<div title="New shader" class="icon icon-new" onclick="StartNewShader()"></div>
						<div title="Recompile shader (Alt+Enter)" class="icon icon-recompile" onclick="RecompileShader(editor.getValue());"></div>
						<div title="Fetch random shader from ShaderToy (Ctrl+Q)" class="icon icon-fetch" onclick="RandomShaderToy();"></div>
					</div>
					<textarea id="textarea-code">
const int NUM_STEPS = 8;
const float PI	 	= 3.1415;
const float EPSILON	= 1e-3;
float EPSILON_NRM	= 0.1 / iResolution.x;

// sea
const int ITER_GEOMETRY = 3;
const int ITER_FRAGMENT = 5;
const float SEA_HEIGHT = 0.6;
const float SEA_CHOPPY = 4.0;
uniform float SEA_SPEED; // [EDITOR] { group : "Sea", label : "SEA_SPEED", value: 1,     min: 0,   max: 1,   step: 0.01 }
uniform float SEA_FREQ; // [EDITOR] { group : "Sea", label : "SEA_FREQ", value: 0.16,     min: 0,   max: 1,   step: 0.01 }
//const vec3 SEA_BASE = vec3(0.1,0.19,0.22);
//const vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6);
float SEA_TIME = iGlobalTime * SEA_SPEED;
mat2 octave_m = mat2(1.6,1.2,-1.2,1.6);

// math
mat3 fromEuler(vec3 ang) {
	vec2 a1 = vec2(sin(ang.x),cos(ang.x));
    vec2 a2 = vec2(sin(ang.y),cos(ang.y));
    vec2 a3 = vec2(sin(ang.z),cos(ang.z));
    mat3 m;
    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);
	m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);
	m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);
	return m;
}
float hash( vec2 p ) {
	float h = dot(p,vec2(127.1,311.7));	
    return fract(sin(h)*43758.5453123);
}
float noise( in vec2 p ) {
    vec2 i = floor( p );
    vec2 f = fract( p );	
	vec2 u = f*f*(3.0-2.0*f);
    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ), 
                     hash( i + vec2(1.0,0.0) ), u.x),
                mix( hash( i + vec2(0.0,1.0) ), 
                     hash( i + vec2(1.0,1.0) ), u.x), u.y);
}

// lighting
float diffuse(vec3 n,vec3 l,float p) {
    return pow(dot(n,l) * 0.4 + 0.6,p);
}
float specular(vec3 n,vec3 l,vec3 e,float s) {    
    float nrm = (s + 8.0) / (3.1415 * 8.0);
    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;
}

// sky
vec3 getSkyColor(vec3 e) {
    e.y = max(e.y,0.0);
    vec3 ret;
    ret.x = pow(1.0-e.y,2.0);
    ret.y = 1.0-e.y;
    ret.z = 0.6+(1.0-e.y)*0.4;
    return ret;
}

// sea
float sea_octave(vec2 uv, float choppy) {
    uv += noise(uv);        
    vec2 wv = 1.0-abs(sin(uv));
    vec2 swv = abs(cos(uv));    
    wv = mix(wv,swv,wv);
    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);
}

float map(vec3 p) {
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    vec2 uv = p.xz; uv.x *= 0.75;
    
    float d, h = 0.0;    
    for(int i = 0; i < ITER_GEOMETRY; i++) {        
    	d = sea_octave((uv+SEA_TIME)*freq,choppy);
    	d += sea_octave((uv-SEA_TIME)*freq,choppy);
        h += d * amp;        
    	uv *= octave_m; freq *= 1.9; amp *= 0.22;
        choppy = mix(choppy,1.0,0.2);
    }
    return p.y - h;
}

float map_detailed(vec3 p) {
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    vec2 uv = p.xz; uv.x *= 0.75;
    
    float d, h = 0.0;    
    for(int i = 0; i < ITER_FRAGMENT; i++) {        
    	d = sea_octave((uv+SEA_TIME)*freq,choppy);
    	d += sea_octave((uv-SEA_TIME)*freq,choppy);
        h += d * amp;        
    	uv *= octave_m; freq *= 1.9; amp *= 0.22;
        choppy = mix(choppy,1.0,0.2);
    }
    return p.y - h;
}

vec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  
	vec3 SEA_BASE = vec3(iColour[0]);
	vec3 SEA_WATER_COLOR = vec3(iColour[1]);

    float fresnel = 1.0 - max(dot(n,-eye),0.0);
    fresnel = pow(fresnel,3.0) * 0.65;
        
    vec3 reflected = getSkyColor(reflect(eye,n));    
    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12; 
    
    vec3 color = mix(refracted,reflected,fresnel);
    
    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);
    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;
    
    color += vec3(specular(n,l,eye,60.0));
    
    return color;
}

// tracing
vec3 getNormal(vec3 p, float eps) {
    vec3 n;
    n.y = map_detailed(p);    
    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;
    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;
    n.y = eps;
    return normalize(n);
}

float heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {  
    float tm = 0.0;
    float tx = 1000.0;    
    float hx = map(ori + dir * tx);
    if(hx > 0.0) return tx;   
    float hm = map(ori + dir * tm);    
    float tmid = 0.0;
    for(int i = 0; i < NUM_STEPS; i++) {
        tmid = mix(tm,tx, hm/(hm-hx));                   
        p = ori + dir * tmid;                   
    	float hmid = map(p);
		if(hmid < 0.0) {
        	tx = tmid;
            hx = hmid;
        } else {
            tm = tmid;
            hm = hmid;
        }
    }
    return tmid;
}

// main
void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
	vec2 uv = fragCoord.xy / iResolution.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;    
    float time = iGlobalTime * 0.3 + iMouse.x*0.01;
        
    // ray
    vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);    
    vec3 ori = vec3(0.0,3.5,time*5.0);
    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.15;
    dir = normalize(dir) * fromEuler(ang);
    
    // tracing
    vec3 p;
    heightMapTracing(ori,dir,p);
    vec3 dist = p - ori;
    vec3 n = getNormal(p, dot(dist,dist) * EPSILON_NRM);
    vec3 light = normalize(vec3(0.0,1.0,0.8)); 
             
    // color
    vec3 color = mix(
        getSkyColor(dir),
        getSeaColor(p,n,light,dir,dist),
    	pow(smoothstep(0.0,-0.05,dir.y),0.3));
        
    // post
	fragColor = vec4(pow(color,vec3(0.75)), 1.0);
}
					</textarea>
			</div>
		</div>

		<div class="row footer"></div>

		</div>
	</body>
</html>