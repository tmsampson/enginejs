<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="stylesheet" href="enginejs/resources/css/third_party/jquery-ui/jquery-ui.css">

		<title>Shader Joy</title>

		<!-- EngineJS -->
		<script type="text/javascript" src="enginejs/jquery.js"></script>
		<script type="text/javascript" src="enginejs/resources/libs/jquery-ui.js"></script>
		<script type="text/javascript" src="enginejs/engine.js"></script>

		<!-- Shader Joy -->
		<link rel="stylesheet" href="style/shaderjoy.css"/>

		<!-- Spectrum -->
		<script src='enginejs/resources/misc/spectrum/spectrum.js'></script>
		<link rel='stylesheet' href='enginejs/resources/misc/spectrum/spectrum.css' />

		<!-- Codemirror -->
		<script src="enginejs/resources/misc/codemirror/lib/codemirror.js"></script>
		<script src="enginejs/resources/misc/codemirror/mode/clike/clike.js"></script>
		<link rel="stylesheet" href="enginejs/resources/misc/codemirror/lib/codemirror.css"/>
		<link rel="stylesheet" href="enginejs/resources/misc/codemirror/theme/mdn-like.css"/>

		<script language="javascript">
		var resources =
		{
			txt_template : { file: "resources/template.fs.txt" },
			txt_new      : { file: "resources/new.fs.txt"      },
		};

		var template_code = "";
		var editor = null; 
		var shader_toy_ids = [];
		var shader_toy_index = -1;
		var program = null;

		function StartNewShader()
		{
			var code = resources["txt_new"].text;
			editor.setValue(code);
			RecompileShader(code);
		}

		function NextShaderToy(index)
		{
			shader_toy_index = (shader_toy_index + index) % (shader_toy_ids.length -1);
			var get_id = shader_toy_ids[shader_toy_index];

			Engine.Net.FetchResource("https://www.shadertoy.com/api/v1/shaders/" + get_id + "?key=ftHKwr", function(data)
			{
				var code = data.Shader.renderpass[0].code;
				editor.setValue(code);
				RecompileShader(code);
			});
		}

		function RandomShaderToy()
		{
			shader_toy_index = Engine.Math.RandomInteger(0, shader_toy_ids.length -1);
			var get_id = shader_toy_ids[shader_toy_index];

			Engine.Net.FetchResource("https://www.shadertoy.com/api/v1/shaders/" + get_id + "?key=ftHKwr", function(data)
			{
				var code = data.Shader.renderpass[0].code;
				editor.setValue(code);
				RecompileShader(code);
			});
		}

		function GetColours()
		{
			var colours = [];
			for(var i = 0; i < 4; ++i)
			{
				var c = $("#colour" + i).spectrum("get").toRgb();
				colours.push(c.r / 255); colours.push(c.g / 255);
				colours.push(c.b / 255); colours.push(c.a / 255);
			}
			return colours;
		}

		$(document).ready(function()
		{
			var ShowTab = function(sender, tab) { $(".tab-content").hide(); $(".tab").removeClass("tab-active"); $("." + tab).show(); $(sender).addClass("tab-active"); };
			$("#tab-usage").on('click', function() { ShowTab(this, "usage"); });
			$("#tab-colour").on('click', function() { ShowTab(this, "colour"); });
			$("#tab-tweaker").on('click', function() { ShowTab(this, "tweaker"); });
			$("#tab-about").on('click', function() { ShowTab(this, "about"); });

			editor = CodeMirror.fromTextArea(document.getElementById("textarea-code"),
			{
				lineNumbers   : true,
				matchBrackets : true,
				autofocus     : true,
				mode          : "x-shader/x-fragment",
				theme         : "mdn-like",
				extraKeys     :
				{
					"Alt-Enter" : function(instance) { RecompileShader(editor.getValue()); return true; },
					"Ctrl-U" : function(instance) { NextShaderToy(-1); return true; },
					"Ctrl-I" : function(instance) { NextShaderToy(1); return true; },
					"Ctrl-Q" : function(instance) { RandomShaderToy(1); return true; },
					"Ctrl-N" : function(instance) { StartNewShader(); return true; }
				}
			});

			// Setup and trigger layout update
			$(window).resize(function()
			{
				var h = $(".content").height();
				$(".CodeMirror").height(h-30);
				editor.refresh()
				$(".tab-content-container").height(h - 450 - 50 - 6 - 20);
			}).trigger('resize');

			var click_pos = [0, 0];
			var mpos = [0, 0];
			var param_editor = null;

			var on_init = function()
			{
				// API
				Engine.Net.FetchResource("https://www.shadertoy.com/api/v1/shaders?key=ftHKwr", function(data)
				{
					shader_toy_ids = data.Results;
				});

				Engine.Net.FetchResource("resources/help.htm", function(data)
				{
					$(".tab-content.usage").html(data);
				});

				Engine.Net.FetchResource("resources/about.htm", function(data)
				{
					$(".tab-content.about").html(data);
				});

				Engine.Net.FetchResource("resources/colour.htm", function(data)
				{
					$(".tab-content.colour").html(data);
					StartNewShader();
				});

				template_code = resources["txt_template"].text;

				var on_render = function()
				{
					Engine.Gfx.BindShaderProgram(program);
					Engine.Gfx.SetShaderProperty("iGlobalTime", Engine.Time.elapsed_s, Engine.Gfx.SP_FLOAT, true);
					Engine.Gfx.SetShaderProperty("iTime", Engine.Time.elapsed_s, Engine.Gfx.SP_FLOAT, true);
					var res = [ 800, 450, 0 ];
					Engine.Gfx.SetShaderProperty("iResolution", res, Engine.Gfx.SP_VEC3, true);

					Engine.Editor.BindParamEditor($(".tab-content.tweaker")); // Bind sliders

					var mpressed = false;
					if(Engine.Mouse.IsPressed())
					{
						mpos = Engine.Mouse.GetPosition();
						mpressed = true;
					}
					if(Engine.Mouse.IsPressed("left", true))
					{
						click_pos = mpos;
					}

					var mouse = [ mpos[0], mpos[1], mpressed? click_pos[0] : -click_pos[0], mpressed? click_pos[1] : -click_pos[1] ];
					Engine.Gfx.SetShaderProperty("iMouse", mouse, Engine.Gfx.SP_VEC4, true);

					// Colours
					Engine.Gfx.SetShaderProperty("iColour", GetColours(), Engine.Gfx.SP_VEC4_ARRAY, true);
					Engine.Gfx.DrawQuad();
				};
				return on_render;
			};
			Engine.Init(on_init, resources);
		});

		function RecompileShader(user_code)
		{
			var code = template_code + "\n\n" + user_code;
			var shader = Engine.Gfx.CompileFragmentShader(code, []);
			program = Engine.Gfx.CreateShaderProgram(Engine.Resources["vs_general_uv"], shader);

			// sliders
			param_editor = Engine.Editor.BuildParamEditor(shader);
			$(".tab-content.tweaker").empty();
			$(".tab-content.tweaker").append(param_editor);
		}

		</script>
	</head>

	<body>
		<div class="box">

		<div class="row header"><img class="logo" src="img/logo.png"/></div>

		<div class="row content">
			<div class="content-left">
				<canvas width="800" height="450"></canvas>
				<div class="tab-container">
					<div class="tabs">
						<div id="tab-usage" class="tab tab-active">
							Usage
						</div>
						<div id="tab-colour" class="tab">
							Colour
						</div>
						<div id="tab-tweaker" class="tab">
							Tweaker
						</div>
						<div id="tab-about" class="tab">
							About
						</div>
					</div>
					<div class="tab-content-container">
						<div class="tab-content usage">
						</div>
						<div class="tab-content colour">
							Colour here
						</div>
						<div class="tab-content tweaker">
							Tweaker here
						</div>
						<div class="tab-content about">
							About here
						</div>
					</div>
				</div>
			</div>

			<div style="overflow:hidden; flex: 1 1 auto; margin: 0px 0px; background-color:black">
					<div class="toolbar">
						<div title="New shader" class="icon icon-new" onclick="StartNewShader()"></div>
						<div title="Recompile shader (Alt+Enter)" class="icon icon-recompile" onclick="RecompileShader(editor.getValue());"></div>
						<div title="Fetch random shader from ShaderToy (Ctrl+Q)" class="icon icon-fetch" onclick="RandomShaderToy();"></div>
					</div>
					<textarea id="textarea-code">
					</textarea>
			</div>
		</div>

		<div class="row footer"></div>

		</div>
	</body>
</html>