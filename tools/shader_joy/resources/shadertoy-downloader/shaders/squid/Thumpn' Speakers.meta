{
	"Shader": {
		"ver": "0.1",
		"info": {
			"id": "4tfSDj",
			"date": "1439935663",
			"viewed": 543,
			"name": "Thumpn' Speakers",
			"username": "squid",
			"description": "Speakers move with the actual amplitude values from the sound shader, for better or worse.",
			"likes": 7,
			"published": 3,
			"flags": 8,
			"tags": [
				"3d"
			],
			"hasliked": 0
		},
		"renderpass": [
			{
				"inputs": [],
				"outputs": [],
				"code": "",
				"name": "",
				"description": "",
				"type": "image"
			},
			{
				"inputs": [],
				"outputs": [],
				"code": "\n//remix(?) of srtuss's acid jam\n\n#define NSPC 256\n\n#define pi2 6.283185307179586476925286766559\n\n// cheap and unrealistic distortion\nfloat dist(float s, float d)\n{\n\treturn clamp(s * d, -1.0, 1.0);\n}\nvec2 dist(vec2 s, float d)\n{\n\treturn clamp(s * d, -1.0, 1.0);\n}\n\n// quantize\nfloat quan(float s, float c)\n{\n\treturn floor(s / c) * c;\n}\n\n// a resonant lowpass filter's frequency response\nfloat filter(float h, float cut, float res)\n{\n\tcut -= 20.0;\n\tfloat df = max(h - cut, 0.0), df2 = abs(h - cut);\n\treturn exp(-0.005 * df * df) * 0.5 + exp(df2 * df2 * -0.1) * 2.2;\n}\n\n// randomize\nfloat nse(float x)\n{\n\treturn fract(sin(x * 110.082) * 19871.8972);\n\t//return fract(sin(x * 110.082) * 13485.8372);\n}\nfloat nse_slide(float x)\n{\n\tfloat fl = floor(x);\n\treturn mix(nse(fl), nse(fl + 1.0), smoothstep(0.0, 1.0, fract(x)));\n}\n\n// note number to frequency\nfloat ntof(float n)\n{\n\treturn 440.0 * pow(2.0, (n - 69.0) / 12.0);\n}\n\n// tb303 core\nvec2 synth(float tseq, float t)\n{\n\tvec2 v = vec2(0.0);\n\t\n\tfloat tnote = fract(tseq);\n\tfloat dr = 0.26;\n\tfloat amp = smoothstep(0.05, 0.0, abs(tnote - dr - 0.05) - dr) * exp(tnote * -1.0);\n\tfloat seqn = nse(floor(tseq));\n\t//float seqn = nse_slide(tseq);\n\tfloat n = /*20.0 + floor(seqn * 38.0);*/10.0 + floor(seqn * 60.0);\n\tfloat f = ntof(n)+dist(sin((tseq-t)*.1),20.);\n\t\n    float sqr = smoothstep(0.0, 0.01, abs(mod(t * 9.0, 64.0) - 20.0) - 20.0);\n    \n\tfloat base = f;//50.0 + sin(sin(t * 0.1) * t) * 20.0;\n\tfloat flt = exp(tnote * -1.5) * 50.0 + pow(cos(t * 1.0) * 0.5 + 0.5, 4.0) * 80.0 - 0.0;\n\tfor(int i = 0; i < NSPC; i ++)\n\t{\n\t\tfloat h = float(i + 1);\n\t\tfloat inten = 1.0 / h;\n\t\t//inten *= sin((pow(h, sin(t) * 0.5 + 0.5) + t * 0.5) * pi2) * 0.9 + 0.1;\n\t\t\n\t\tinten = mix(inten, inten * mod(h, 2.0), sqr);\n\t\t\n\t\tinten *= exp(-1.0 * max(2.0 - h, 0.0));// + exp(abs(h - flt) * -2.0) * 8.0;\n\t\t\n\t\tinten *= filter(h, flt, 4.0);\n\t\tinten += dist(inten, 8.5)*.5;\n\t\t\n\t\tv.x += inten * sin((pi2 + 0.01) * (t * base * h));\n\t\tv.y += inten * sin(pi2 * (t * base * h));\n\t}\n\t\n\t\n\tfloat o = v.x * amp;//exp(max(tnote - 0.3, 0.0) * -5.0);\n\t\n\t//o = dist(o, 2.5);\n\t\n\treturn vec2(dist(v * amp, 2.0)*1.2);\n}\n\n// heavy 909-ish bassdrum\nfloat kick(float tb, float time)\n{\n\ttb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 5.0;\n\ttb = sqrt(tb * aa) / aa;\n\t\n\tfloat amp = exp(max(tb - 0.15, 0.0) * -10.0);\n\tfloat v = sin(tb * 100.0 * pi2) * amp;\n\tv = dist(v, 4.0) * amp;\n\tv += nse(quan(tb, 0.001)) * nse(quan(tb, 0.00001)) * exp(tb * -20.0) * 2.5;\n\treturn v;\n}\n\n// bad 909-ish open hihat\nfloat hat(float tb)\n{\n\ttb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 4.0;\n\ttb = sqrt(tb * aa) / aa;\n\treturn nse(sin(tb * 4000.0) * 0.0001) * smoothstep(0.0, 0.01, tb - 0.25) * exp(tb * -5.0);\n}\n\n\n\n// oldschool explosion sound fx\nfloat expl(float tb)\n{\n\t//tb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 20.0;\n\ttb = sqrt(tb * aa) / aa;\n\t\n\tfloat amp = exp(max(tb - 0.15, 0.0) * -10.0);\n\tfloat v = nse(quan(mod(tb, 0.1), 0.0001));\n\tv = dist(v, 4.0) * amp;\n\treturn v;\n}\n\nvec2 synth1_echo(float tb, float time)\n{\n    vec2 v;\n    v = synth(tb, time) * 0.5;// + synth2(time) * 0.5;\n\tfloat ec = 0.6, fb = 0.6, et = 2.0 / 9.0, tm = 2.0 / 9.0;\n\tv += synth(tb, time - et) * ec * vec2(1.0, 0.5); ec *= fb; et += tm;\n\tv += synth(tb, time - et).yx * ec * vec2(0.5, 1.0); ec *= fb; et += tm;\n\tv += synth(tb, time - et) * ec * vec2(1.0, 0.5); ec *= fb; et += tm;\n\tv += dist(synth(tb, time - et).yx * ec * vec2(0.5, 1.0), 1.5); ec *= fb; et += tm;\n\t\n    return v;\n}\n\nvec2 mainSound(float time)\n{\n\tvec2 mx = vec2(0.0);\n\t\n\tfloat tb = mod(time * 9.0, 16.0);\n\t\n\t\n\tmx = synth1_echo(tb, time) * 0.8;\n\n    \n    mx += expl(mod(time * 9.0, 64.0) / 4.5) * 0.4;\n    \n\tmx += vec2(hat(tb)) + quan(hat(tb), .01)*.4;\n\t\n\t//mx += dist(fract(tb / 16.0) * sin(ntof(77.0 - 36.0) * pi2 * time), 8.0) * 0.2;\n\t//mx += expl(tb) * 0.5;\n\t\n\tfloat k = kick(tb, time) * 0.6;// - kick(tb, time - 0.004) * 0.5 - kick(tb, time - 0.008) * 0.25);\n\t\n\tmx += vec2(k);\n\t\n\t\n\t\n\tmx = dist(mx, 1.2);\n\t\n\treturn mx;\n}",
				"name": "",
				"description": "",
				"type": "sound"
			}
		]
	}
}