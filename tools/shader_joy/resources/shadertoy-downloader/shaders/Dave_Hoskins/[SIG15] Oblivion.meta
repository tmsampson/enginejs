{
	"Shader": {
		"ver": "0.1",
		"info": {
			"id": "XtfXDN",
			"date": "1437227300",
			"viewed": 3318,
			"name": " [SIG15] Oblivion",
			"username": "Dave_Hoskins",
			"description": "The Oblivion drone. I love all the scenes that include these things.<br/>PLEASE REWIND ON FIRST LOAD [|<], to make sure audio is in sync.<br/>\"Tech 4-9, Jack Harper!!!\"",
			"likes": 72,
			"published": 3,
			"flags": 8,
			"tags": [
				"3d",
				"raymarch",
				"sound",
				"siggraph",
				"drone",
				"sig15",
				"oblivion"
			],
			"hasliked": 0
		},
		"renderpass": [
			{
				"inputs": [
					{
						"id": 4,
						"src": "/presets/tex03.jpg",
						"ctype": "texture",
						"channel": 1
					},
					{
						"id": 8,
						"src": "/presets/tex07.jpg",
						"ctype": "texture",
						"channel": 2
					},
					{
						"id": 27,
						"src": "/presets/cube05_0.png",
						"ctype": "cubemap",
						"channel": 3
					},
					{
						"id": 30,
						"src": "/presets/tex16.png",
						"ctype": "texture",
						"channel": 0
					}
				],
				"outputs": [
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					}
				],
				"code": "",
				"name": "",
				"description": "",
				"type": "image"
			},
			{
				"inputs": [
					{
						"id": 10,
						"src": "/presets/tex09.jpg",
						"ctype": "texture",
						"channel": 1
					},
					{
						"id": 30,
						"src": "/presets/tex16.png",
						"ctype": "texture",
						"channel": 0
					}
				],
				"outputs": [
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					}
				],
				"code": "// [SIG15] Oblivion [sound code]\n// by David Hoskins.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// The sound includes a vocoded 'aaah' and \"Tech 4-9, Jack Harper\" with formants collected straight from the film.\n// Speech coefficients created using Wavesurfer:\n// http://sourceforge.net/projects/wavesurfer/\n\n\n#define TWO_PI \t\t\t6.2831\n#define MOD2 vec2(.16632,.17369)\n#define MOD3 vec3(.16532,.17369,.15787)\n#define PLAY_PHRASES\n\n#define cueINCLOUDS 0.0\n#define cueFLYIN 14.0\n#define cueFRONTOF cueFLYIN + 10.0\n#define cueTHREAT cueFRONTOF + 5.\n#define cueFLYOFF cueTHREAT + 19.0\n\nfloat n1 = 0.0;\nfloat n2 = 0.0;\nfloat fb_lp = 0.0;\nfloat lfb_lp = 0.0;\nfloat hp = 0.0;\nfloat p4=1.0e-24;\nfloat sample = 1.0 / iSampleRate;\nvec3 drone;\nfloat gTime;\nfloat speed, height;\n\n#define TAU  6.28318530718\n#define NT(a, b, c) if(t > a){x = a; n = b; ty = c;}\n#define P(a, b, c, d, e, f) if(t >= sec){x = sec; pit = ivec2(a, b), form = ivec4(c, d, e, f);} if(t+step >= sec){pit2 = ivec2(a, b),  form2 = ivec4(c, d, e, f);} sec+=step;\n\n\n#define N(a, b) if(t > a){x = a; n = b;}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in ...\nfloat hash11(float p)\n{\n\tvec2 p2 = fract(vec2(p) * MOD2);\n    p2 += dot(p2.yx, p2.xy+19.19);\n\treturn fract(p2.x * p2.y);\n}\n\n//----------------------------------------------------------------------------------\nfloat tract(float x, float f, float bandwidth)\n{\n    float ret = sin(TAU * f * x) * exp(-bandwidth * 3.14159265359 * x);\n    return ret;\n}\n\n//----------------------------------------------------------------------------------\nfloat noise11(float x)\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix( hash11(p), hash11(p + 1.0), f)-.5;\n}\n\n//----------------------------------------------------------------------------------\nfloat Fricative(float x, float f)\n{\n    float ret = hash11(floor(f * x)*20.0)-.5;\n\treturn ret*3.0;\n}\n\n\n//----------------------------------------------------------------------------------\nfloat noteMIDI(float n)\n{\n\treturn 440.0 * pow(2.0, (n - 69.0) / 12.0);\n}\n\n//----------------------------------------------------------------------------------\nfloat saw( float x, float a)\n{\n    float f = fract( x );\n\treturn (clamp(f/a,0.0,1.0)-clamp((f-a)/(1.0-a),0.0,1.0))*2.0-.5;\n}\n\n//----------------------------------------------------------------------------------\nfloat sqr(float t)\n{\n\treturn step(fract(t), 0.5)-0.5;\n}\n\n//----------------------------------------------------------------------------------\nfloat tri(float t)\n{\n\treturn (abs(fract(t)-0.5)*2.-0.5)*2.;\n}\n\n//----------------------------------------------------------------------------------\nfloat sine(float t)\n{\n\treturn sin(t* 3.141*2.0);\n}\n\n//----------------------------------------------------------------------------------------\nfloat softBeep(float t)\n{\n\tfloat n = 0.0;\n    float x = 0.0;\n    float ty = 0.0;\n \n    //NT(cueFRONTOF-4.0, 61., .2);\n    NT(cueFRONTOF-4.0,56., .5);\n    \n    NT(cueFRONTOF+.7, 56., .4);\n    NT(cueFRONTOF+1., 61., .5);\n    \n    float asr = cueFLYOFF-.9;\n    NT(asr+.7, 69.0, .5);\n\n    n = noteMIDI(n);\n    \n    x = t-x;\n    \n\tfloat aud = 0.0;\n      \n    float vol = smoothstep(.0, .05, x) * smoothstep(1.0, .8, x/ty);\n    aud += sine(x*n*2.0+t)*sine(x*n*.9+t)*smoothstep(0.0, .04, t)*vol*.3;\n    aud = clamp(aud*.9,-1., 1.);\n\n    return aud;\n}\n\n//----------------------------------------------------------------------------------------\nfloat beeDoop(float t)\n{\n\tfloat n = 0.0;\n    float x = 0.0;\n    float ty = 0.0;\n    \n    NT(cueTHREAT-1.0, 63.0, .14);\n    NT(cueTHREAT-1.0+.14, 51.0, .55);\n\n    NT(cueTHREAT+3.2, 63.0, .14);\n    NT(cueTHREAT+3.2+.14, 51.0, .55);\n\n    n = noteMIDI(n);\n    \n    x = t-x;\n    \n\tfloat aud = 0.0;\n    float vol = smoothstep(.0, .01, x) * smoothstep(1.0, .7, x/ty);\n    aud = tri(x*n*4.0) * tri(x*n*.5) * sine(x*n*2.)*vol;\n    aud += sine(x*n*2.0+t)*smoothstep(0.0, .04, t)*vol*.3;\n    aud = clamp(aud*.7,-1., 1.);\n\n    return aud;\n}\n\n //----------------------------------------------------------------------------------------\n// Speech Processing Based on a Sinusoidal Model\n// For the vocal part I analylised a sample from the film and extracted\n// the vocal formants, which of course turned out to be an 'aaaah!' :)\n// https://www.ll.mit.edu/publications/journal/pdf/vol01_no2/1.2.3.speechprocessing.pdf\nfloat aaaah(float t)\n{\n\tfloat n = 0.0;\n    float x = 0.0;\n    float ty = 0.0;\n    //t=  mod(t, 2.0)+cueTHREAT;\n    NT(cueTHREAT, 52., 1.1);\n    NT(cueFLYOFF+2.0, 52., 3.1);\n    \n    n = noteMIDI(n);\n    x = t-x;\n    float vol= smoothstep(.0, .03, x) * smoothstep(1.0, .9, x/ty)*.5;\n    float pit = smoothstep(.0, .8, x) * smoothstep(1.0, .9, x/ty);\n    float formSlide = (smoothstep(.3, .0, x) + smoothstep(.8, 1., x/ty)) * 100.0;\n    pit = pow(pit,.1);\n    pit = (1.0-pit*.001)/n;\n    \n    t += noise11(x*7.+45.0)*.0008; // ...Add a bit of random flutter to humanise it.\n\n    // Build the vocal tract with sine waves...\n    x = mod(t, pit);\n\tfloat aud =\ttract(x, 710.0-formSlide, 70.0) *.5 +\n       \t\t\ttract(x, 1000.0+formSlide, 90.0)  * .6 +\n\t       \t\ttract(x, 2450.0+formSlide, 140.0) * .4;\n   \t    \n    aud = clamp(aud * vol, -1.0, 1.0);\n    return aud;\n}\nfloat tech49(float t)\n{\n    //t = mod(t, 7.0)+ cueTHREAT+4.5; // ...test\n    float step = .013;\n    float vol = .45;\n    float adjust = 1.0;\n    float sec = cueTHREAT+4.5;\n    if (t > cueTHREAT+6.5 && t < cueTHREAT+13.5)\n    {\n        t-=3.0;\n        vol = .7;\n        step = 0.023;\n        adjust = 1.18;\n    }\n    \n    ivec4 form = ivec4(271,2104,3152,4600), form2 = form;\n    ivec2 pit = ivec2(0\t,0), pit2 = pit;\n    float x = .0;\n\n\t// Pitch, intensity and formants for...\n    // \"Tech 4-9, Jack Harper\"\n    // Uses the output from free software called WaveSurfer:-\n    // http://sourceforge.net/projects/wavesurfer/\n    \n    // It's still a little rough between the frames, but it's getting there.\n    \n    // I needed to hand edit some of these bastards!...\n   \n    // Pitch or fricative(0) , gain, f1, f2, f3, f4\n    P(0\t,42,\t271,\t2104,\t3152,\t4600);\n    P(0\t,30,\t515,\t1568,\t2589,\t3820);\n    P(0\t,20,\t650,\t1955,\t2644,\t3900);\n    P(154\t,40\t,650    ,1663,\t 2644\t,3900);\n    P(164\t,46\t,557\t,1663\t,2540\t,3532);\n    P(178\t,44\t,576\t,1641\t,2465\t,3399);\n    P(179\t,53\t,604\t,1677\t,2439\t,3368);\n    P(180\t,58\t,610\t,1751\t,2352\t,3272);\n    P(181\t,57\t,594\t,1805\t,2327\t,3211);\n    P(183\t,58\t,573\t,1847\t,2267\t,3195);\n    P(186\t,59\t,554\t,1594\t,1999\t,3120);\n    P(186\t,57\t,534\t,1611\t,1981\t,3097);\n    P(185\t,58\t,512\t,1762\t,1902\t,3205);\n    P(184\t,56\t,429\t,1848\t,2489\t,4087);\n    P(0\t,12\t,350,1600,1900,3900\t );\n    P(0\t,40\t,350,1600,1900,3900\t );\n    P(0\t,30\t,300,1950,2800,4400\t );\n    P(0\t,23\t,300,1950,2800,4400\t\t );\n    P(0\t,17\t,300,1950,2800,4400\t\t );\n    P(0\t,0\t,755\t,1825\t,2511\t,4083\t );\n    P(0\t,0\t,440\t,1811\t,2529\t,4099\t );\n    P(0\t,17\t,287\t,1223\t,2455\t,3977\t );\n    P(0\t,28\t,280\t,1259\t,2338\t,3707\t );\n    P(0\t,32\t,281\t,1288\t,2345\t,3719\t );\n    P(0\t,34\t,281, 1294, 2361,4166\t );\n    P(0\t,35\t,281, 1294, 2361,4166\t );\n    P(0\t,45\t,281, 1294, 2361,4166\t );\n    P(207\t,42\t,487\t,934\t,1791\t,3100);\n    P(214\t,48\t,489\t,993\t,1858\t,3159);\n    P(220\t,55\t,489\t,1005\t,1925\t,3233);\n    P(221\t,58\t,487\t,1014\t,1942\t,3252);\n    P(220\t,57\t,483\t,1038\t,1950\t,3234);\n    P(224\t,56\t,486\t,1057\t,1985\t,3227);\n    P(223\t,56\t,491\t,1058\t,1996\t,3205);\n    P(222\t,56\t,494\t,1078\t,2007\t,3101);\n    P(222\t,56\t,495\t,1320\t,2480\t,3186);\n    P(220\t,56\t,481\t,1523\t,2554\t,3497);\n    P(221\t,55\t,464\t,1539\t,2580\t,3525);\n    P(221\t,55\t,460\t,1547\t,2629\t,3550);\n    P(220\t,50\t,463\t,1562\t,2551\t,3523);\n    P(219\t,37\t,474\t,1573\t,2494\t,3562);\n    P(219\t,35\t,501\t,1604\t,2513\t,3596);\n    P(219\t,40\t,555\t,1650\t,2501\t,3624);\n    P(226\t,45\t,625\t,1598\t,2486\t,3676);\n    P(226\t,57\t,655\t,1562\t,2462\t,3752);\n    P(227\t,57\t,667\t,1552\t,2410\t,3852);\n    P(227\t,58\t,674\t,1552\t,2390\t,3900);\n    P(225\t,57\t,679\t,1549\t,2402\t,3900);\n    P(225\t,58\t,681\t,1537\t,2425\t,3877);\n    P(227\t,57\t,677\t,1513\t,2448\t,3850);\n    P(227\t,56\t,667\t,1504\t,2410\t,3823);\n    P(229\t,58\t,659\t,1536\t,2346\t,3766);\n    P(229\t,58\t,640\t,1604\t,2318\t,3611);\n    P(231\t,57\t,589\t,1791\t,2333\t,3433);\n    P(229\t,55\t,518\t,1852\t,2396\t,4156);\n    P(229\t,57\t,468\t,1907\t,2497\t,4151);\n    P(227\t,56\t,440\t,1973\t,2564\t,4113);\n    P(221\t,54\t,423\t,1970\t,2576\t,4053);\n    P(178\t,54\t,400\t,1857\t,2517\t,4033);\n    P(205\t,44\t,425\t,1690\t,2231\t,3986);\n    P(175\t,32\t,418\t,1566\t,2124\t,3959);\n    P(172\t,38\t,384\t,1569\t,2307\t,3983);\n    P(165\t,47\t,455\t,1783\t,2630\t,3942);\n    P(0,    0, 0, 0, 0, 0);\n    P(0,    0, 0, 0, 0, 0);\n    P(0,    0, 0, 0, 0, 0);\n    P(0,    0, 0, 0, 0, 0);\n\n    P(0,    0, 0, 0, 0, 0);\n    P(0,    20,480\t,1840\t,2697\t,3859);\n    P(177,  40,\t174,1914,3509,3900);\n    P(0\t,   34,\t174,1914,3509,3900);\n    P(0\t,\t25,\t174,\t1914,\t2609,3900);\n    P(0\t,\t 10\t,405\t,1843\t,2603\t,3851);\n    P(177\t,46\t,445\t,1807\t,2487\t,2996);\n    P(200\t,47\t,472\t,1780\t,2465\t,3037);\n    P(219\t,48\t,509\t,1755\t,2454\t,3096);\n    P(227\t,54\t,614\t,1746\t,2435\t,3143);\n    P(227\t,56\t,658\t,1747\t,2421\t,3163);\n    P(220\t,53\t,661\t,1747\t,2409\t,3153);\n    P(222\t,53\t,662\t,1732\t,2365\t,3132);\n    P(220\t,57\t,662\t,1730\t,2426\t,3162);\n    P(219\t,59\t,659\t,1739\t,2506\t,3271);\n    P(217\t,59\t,652\t,1732\t,2440\t,3288);\n    P(216\t,58\t,635\t,1728\t,2347\t,3236);\n    P(215\t,57\t,609\t,1748\t,2277\t,3221);\n    P(209\t,57\t,585\t,1798\t,2202\t,3301);\n    P(205\t,57\t,547\t,1860\t,2126\t,3292);\n    P(200\t,56\t,367\t,1952\t,3296\t,4100);\n    P(178\t,44\t,282\t,1943\t,3417\t,4117);\n    P(0\t,03\t,322\t,1959\t,2548\t,4132\t );\n    P(0\t,27\t,409\t,1826\t,2560\t,4125\t );\n    P(0\t,0\t,331,1761,2488,3921\t );\n    P(0\t,0\t,331,1761,2488,3921\t );\n    P(0\t,30\t,331,1761,2488,3921\t );\n    P(0\t,38\t,331,1761,2488,3921\t );\n    P(0\t,40\t,331,1761,2488,3921\t );\n    P(189\t,35\t,600\t,1300\t,2020\t,3912);\n    P(193\t,44\t,621\t,1290\t,2070\t,3972);\n    P(201\t,50\t,636\t,1203\t,2070\t,4011);\n    P(208\t,53\t,643\t,1097\t,2004\t,4119);\n    P(217\t,54\t,644\t,1084\t,1987\t,4227);\n    P(220\t,55\t,642\t,1095\t,2109\t,4224);\n    P(217\t,57\t,642\t,1115\t,2067\t,4193);\n    P(215\t,54\t,643\t,1120\t,1923\t,4078);\n    P(214\t,54\t,647\t,1138\t,1842\t,3808);\n    P(216\t,56\t,650\t,1169\t,1801\t,3762);\n    P(218\t,56\t,652\t,1237\t,1790\t,3768);\n    P(220\t,55\t,648\t,1275\t,1784\t,3763);\n    P(223\t,53\t,621\t,1256\t,1763\t,3629);\n    P(225\t,50\t,533\t,1123\t,1636\t,3516);\n    P(222\t,52\t,386\t,1006\t,1563\t,3361);\n    P(192\t,48\t,255\t,1203\t,2528\t,3211);\n    P(183\t,35\t,304\t,1151\t,2209\t,3086);\n    P(156\t,29\t,303\t,841\t,1900\t,2698);\n    P(154\t,7\t,260\t,895\t,1884\t,2635);\n    P(168\t,8\t,217\t,957\t,2642\t,3825);\n    P(0  \t,38\t,254\t,980\t,1873\t,2688);\n    P(148\t,28\t,338\t,1142\t,1659\t,3780);\n    P(143\t,26\t,436\t,1171\t,1594\t,3789);\n    P(179\t,25\t,464\t,1191\t,1585\t,3822);\n    P(162\t,31\t,465\t,1211\t,1574\t,3756);\n    P(231\t,44\t,462\t,1235\t,1567\t,3678);\n    P(229\t,53\t,461\t,1252\t,1557\t,3670);\n    P(229\t,53\t,461\t,1252\t,1557\t,3670);\n    P(226\t,52\t,459\t,1273\t,1548\t,3658);\n    P(224\t,57\t,468\t,1300\t,1597\t,3665);\n    P(222\t,56\t,492\t,1317\t,1605\t,3715);\n    P(217\t,52\t,492\t,1342\t,1587\t,3734);\n    P(209\t,49\t,444\t,1424\t,1612\t,3770);\n    P(198\t,46\t,399\t,1463\t,1755\t,2960);\n    P(179\t,38\t,303\t,1423\t,1831\t,2912);\n    P(0,    0, 0, 0, 0, 0);\n    P(0,    0, 0, 0, 0, 0);\n\n    x = t - x;\n    float sm = clamp(x/step, 0.0,1.0);\n\n  \n    float aud = 0.0;\n    float fric = 0.0;\n    float intensity = pow(8.0, float(pit.y)/19.0) * .001;\n    float intensity2 = pow(8.0, float(pit2.y)/19.0) * .001;\n    \n    intensity = mix(intensity, intensity2, sm);\n    vec4 formants  = mix(vec4(form), vec4(form2), sm);\n    \n    if (pit.x > 0)\n    {\n\n  \t\tfloat p = 1.0/(float(pit.x)*adjust);\n        if (pit2.x > 0)\n        {\n\t       \tfloat p2 = 1.0/(float(pit2.x)*adjust);\n            p = max(mix(p, p2, sm), 0.);\n        }\n\n        float a = mod(x, p); \n\t\taud =\ttract(a, formants.x, 70.0) +\n      \t\t\ttract(a, formants.y, 90.0)  * .7 +\n\t       \t\ttract(a, formants.z, 140.0) * .6 + \n        \t\ttract(a, formants.w, 210.0) * .4;\n        aud *= intensity;\n    }\n    else\n    {\n         vec4 formants  = vec4(form);\n         fric += Fricative(t, formants.x) +\n      \t\t\tFricative(t, formants.y) +\n       \t\t\tFricative(t, formants.z)*1.8;\n        aud = fric*intensity*.25;\n    }\n  \n\n\taud = clamp(aud*vol, -1.0, 1.0);\n    \n    return aud;\n\n}\n\n\n//----------------------------------------------------------------------------------------\nfloat beepPong(float t)\n{\n\tfloat n = 0.0, x = 0.0, ty = 0.0;\n    float asr = cueFLYOFF-4.;\n    //t = mod(t, 3.0) + cueFLYOFF-3.5;\n    NT(asr, 93.0, .2);\n    NT(asr+0.1, 69.0, .3);\n    NT(asr+.3, 81.0, .55);\n    n = noteMIDI(n);\n    x = t-x;\n\tfloat aud = 0.0;\n    asr = min((t-asr)*18.0, 1.0);\n    float vol = smoothstep(.0, .002, x) * smoothstep(1.0, .1, x/ty)*asr;\n    aud = sine(x*n)*vol;\n   \taud += sine(x*n*.99+t)*smoothstep(0.0, .04, t)*vol*.3;\n    aud = clamp(aud*.3,-1., 1.);\n\n    return aud;//(1.5 * aud - 0.5 * aud * aud * aud);\n}\n\n//----------------------------------------------------------------------------------------\nfloat boom(float t)\n{\n\tfloat n = 0.0, x = 0.0, ty = 0.0;\n    //t = mod(t, 2.)+cueFLYOFF-.9;\n    float asr = cueFLYOFF-.9;\n\n    NT(asr+0.3, 33.0, .1);\n    NT(asr+.6, 29.0, .1);\n    NT(asr+.9, 26.0, .2);\n    \n    n = noteMIDI(n);\n    x = t-x;\n    \n\tfloat aud = 0.0;\n    float vol = smoothstep(.0, .002, x) * smoothstep(1.0, .9, x/ty);\n    n-=x*50.0;\n    aud = tri(x*n);\n    aud += tri(x*n*2.0);\n    aud = clamp(aud*vol,-1., 1.);\n\n    return (1.5 * aud - 0.5 * aud * aud * aud)*.7;\n}\n\n//----------------------------------------------------------------------------------------\nfloat scanner(float t)\n{\n    float n = noteMIDI(21.0);\n     float   scannerOn = smoothstep(cueTHREAT+4.0,cueTHREAT+4.2, t)* smoothstep(cueTHREAT+11.5,cueTHREAT+11.2, t);\n    float r = sin(t*2.) * scannerOn;\n    float vol= (smoothstep(0.4, 0.0,abs(r-.4))+.2) * scannerOn;\n\tfloat b = abs(sin(t*8.0))*.3;\n    \n    float aud = (saw(t*n*2.0, 1.)+saw(t*n*2.1, 1.))*.2;\n    aud += saw(t*n*4.0, .6+b)+saw(t*n*4.01, .6+b);\n    aud = clamp(aud*vol,-1., 1.);\n    return aud;//(1.5 * aud - 0.5 * aud * aud * aud);\n}\n\n//----------------------------------------------------------------------------------------\nvec2 deepFuzz(float t)\n{\n\tfloat n = 0.0;\n    float x = 0.0;\n    float ty = 0.0;\n    \n    NT(cueFRONTOF-2.2, 28., .5);\n    NT(cueFRONTOF-1.2, 28., .5);\n\n    NT(cueTHREAT+1.2, 28., .5);\n    NT(cueTHREAT+2.2, 28., .5);\n    \n    NT(cueTHREAT+10.+1.2, 28., .5);\n    NT(cueTHREAT+10.+2.2, 28., 1.5);\n   \n    n = noteMIDI(n);\n    x = t-x;\n    \n    float vol= smoothstep(.0, .0, x) * smoothstep(1.0, .98, x/ty);\n    \n    vol *= smoothstep(cueFRONTOF, cueFRONTOF+.2, t)*.9+.1;\n    float pit = 1.0+sqr(t*250.0)*.02;\n    vec2 aud = vec2(0.0);\n    aud.x += saw(t*n*pit, 1.)+saw(t*n*1.01*pit, 1.)+saw(t*n*4.0*pit, 1.);\n    aud.y += saw(t*n*pit, 1.)+saw(t*n*.99*pit, 1.)+saw(t*n*4.0*pit, 1.);\n    aud = clamp(aud * vol*.5, -1.0, 1.0);\n    return aud;//(1.5 * aud - 0.5 * aud * aud * aud);\n}\n    \n//----------------------------------------------------------------------------------------\nvec3 dronePath(float ti)\n{\n    vec3 p = vec3(-2030, 340, 2200.0);\n    p = mix(p, vec3(-2030, 340, 2000.0),\t\tsmoothstep(cueINCLOUDS, cueFLYIN-.5, ti));\n    p = mix(p, vec3(-30.0, 18.0, 300.0),\t\tsmoothstep(cueFLYIN, cueFLYIN+4.0, ti));\n    p = mix(p, vec3(-35.0, 25.0, 10.0), \t\tsmoothstep(cueFLYIN+4.0,cueFLYIN+8.0, ti));\n    p = mix(p, vec3(30.0, 0.0, 15.0), \t\t\tsmoothstep(cueFRONTOF+.5,cueFRONTOF+2.5, ti)); //../ Move to front of cam.\n    p = mix(p, vec3(0.0, 8.0, .0), \t\t\t\tsmoothstep(cueTHREAT, cueTHREAT+.5, ti)); \t// ...Threaten\n    p = mix(p, vec3(0.0, 8.0, -4.0), \t\t\tsmoothstep(cueTHREAT+2.0, cueTHREAT+2.3, ti)); \t// ...Threaten\n    p = mix(p, vec3(0.0, 8., -12.0), \t\t\tsmoothstep(cueTHREAT+3.0, cueTHREAT+3.3, ti)); \t// ...Threaten\n    p = mix(p, vec3(0.0, 110.0, 0.0), \t\t\tsmoothstep(cueFLYOFF,cueFLYOFF+1.5, ti)); // ...Fly off\n    p = mix(p, vec3(4000.0, 110.0, -4000.0), \tsmoothstep(cueFLYOFF+2.6,cueFLYOFF+10.0, ti)); \n    return p; \n}\n\n//----------------------------------------------------------------------------------------\nvec3 cameraAni(float ti)\n{\n    vec3 p;\n    p = mix(drone-vec3(0.0,0.0, 10.0), drone-vec3(0.0,0.0, 20.0), smoothstep(cueINCLOUDS,cueINCLOUDS+2.0, ti));\n    p = mix(p, drone-vec3(17.0,-14.0, 35.0), smoothstep(cueINCLOUDS+2.0,cueFLYIN-3.0, ti));\n    p = mix(p, vec3(0.0, 0.0, -28.0), step(cueFLYIN, ti));\n\tp = vec3(p.xy, mix(p.z, -40.0, smoothstep(cueTHREAT,cueTHREAT+4.0, ti)));\n    return p;\n}\n\n\n//----------------------------------------------------------------------------------------\nfloat engines(float ti)\n{\n\tfloat  t = ti+ sin(height*.7)*.3+1.0;\n\tfloat t1 = texture2D(iChannel1, vec2(t*(2.44),t*11.33), -4.0).x *  .5-.25;\n\tt1 += texture2D(iChannel1, vec2(t*(2.44),t*1.33), -99.0).x -.5;\n    float t2 = texture2D(iChannel0, vec2(ti*13.81,ti*4.73), -4.0).x * .5-.25;\n    t2 += texture2D(iChannel0, vec2(ti*13.81,ti*14.54), -99.0).x * .08-.04;\n\tfloat f = mix(t1, t2, speed);\n\tf+= clamp((texture2D(iChannel1, vec2(ti*5.44,t*12.33), -99.0).x*2.0-1.) *(smoothstep(cueFLYOFF+.0, cueFLYOFF+2.8, ti))*4.0, -1.,1.);\n    f += (texture2D(iChannel0, vec2(ti*2.4413,ti*4.1375), -3.).x*2.0-1.);\n\treturn clamp(f*(speed+.5), -1.0, 1.0);\n}\n\n//----------------------------------------------------------------------------------------\nvec2 droneGunAni(float ti)\n{\n    vec2 a;\n   \tfloat mov;\n    mov = smoothstep(cueFLYOFF-1., cueFLYOFF-3.0, ti);\n    mov = mov*3.1-1.4;\n    a.x = (sin(mov)+1.0)*1.5;\n    a.y = smoothstep(.3,.7,sin(mov))*3.0;\n    return a;\n}\n\n//----------------------------------------------------------------------------------------\nvec2 guns(float ti)\n{\n\tvec2 a;\n    vec2 ga = droneGunAni(ti);\n    a = texture2D(iChannel0, vec2(ga.x*14.4,ga.x*21.33), -99.0).xy-.5;\n    a -= texture2D(iChannel0, vec2(ga.x*14.4,ga.x*21.33), -3.0).xy-.5;\n    a *= .3;\n    a += texture2D(iChannel1, vec2(ga.y*1.44,ga.y*1.03), -99.0).xy*2.0-1.;\n    return a*.5;\n}\n\n//----------------------------------------------------------------------------------------\nvec2 allsounds(float t)\n{\n    vec2 audio = vec2(0);\n\taudio = vec2(beeDoop(t));\n    audio += vec2(aaaah(t));\n    audio += vec2(deepFuzz(t));\n    audio += vec2(beepPong(t));\n    audio += engines(t);\n    audio += vec2(scanner(t));\n    audio = clamp(audio, -1.0, 1.0);\n    audio *= smoothstep(cueFLYOFF-.3, cueFLYOFF-.8, t)+smoothstep(cueFLYOFF, cueFLYOFF+.3, t);\n    audio += vec2(boom(t));\n    audio += vec2(softBeep(t));\n    audio += guns(t);\n    audio *= smoothstep(cueFLYIN, cueFLYIN-.2, t)  + smoothstep(cueFLYIN, cueFLYIN+.2, t);\n    audio += vec2(tech49(t));\n    return audio*.8;\n}\n\n//----------------------------------------------------------------------------------------\nvec2 mainSound(float time)\n{\n\t float ti = mod(time, 57.);\n     // Tests cues...\n//   float ti = mod(time, 45.0);\n   //float ti = mod(time, 6.5)+cueFRONTOF;\n   //float ti = mod(time, 15.)+cueTHREAT+1.0;\n   //float ti = mod(time, 8.5)+cueFLYOFF-2.5;\n    \n    drone = dronePath(ti);\n    vec3 camPos = cameraAni(ti);\n    float l = max(length(drone-camPos)-20.0, 1.);\n    speed = clamp(length(drone -dronePath(ti-.08)),0.0, 1.1);\n    height = drone.y;\n    float disAtten = clamp(7330.0/(l*l), 0.0, 1.0);\n\n   \tvec2 audio = allsounds(ti)*disAtten;\n    // Echo, echo echo...\n\taudio += allsounds(ti-.3)*.12 * vec2(1.0, .3)*disAtten;\n    audio += allsounds(ti-.6)*.06 * vec2(.3, 1.)*disAtten;\n    audio += allsounds(ti-.9)*.03 * vec2(1., .3)*disAtten;\n    //audio += allsounds(ti-.12)*.025 * vec2(.3, 1.)*disAtten;.// ...too much!\n    \n    return audio * smoothstep(0.0, 2., ti) * smoothstep(57.0, 55., time);\n}\n\n",
				"name": "",
				"description": "",
				"type": "sound"
			}
		]
	}
}