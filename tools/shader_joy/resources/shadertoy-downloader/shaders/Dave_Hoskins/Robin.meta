{
	"Shader": {
		"ver": "0.1",
		"info": {
			"id": "4tl3RM",
			"date": "1420221416",
			"viewed": 3501,
			"name": "Robin ",
			"username": "Dave_Hoskins",
			"description": "The winter Robin - a UK resident bird.<br/>They occasionally sing at night next to street lights.<br/>Despite their cute appearance, they are aggressively territorial.<br/>Update: Background birds now answer back.",
			"likes": 69,
			"published": 3,
			"flags": 8,
			"tags": [
				"3d",
				"raymarching",
				"sound",
				"antialiasing",
				"vr",
				"robin"
			],
			"hasliked": 0
		},
		"renderpass": [
			{
				"inputs": [
					{
						"id": 3,
						"src": "/presets/tex02.jpg",
						"ctype": "texture",
						"channel": 0
					},
					{
						"id": 26,
						"src": "/presets/cube04_0.png",
						"ctype": "cubemap",
						"channel": 2
					},
					{
						"id": 27,
						"src": "/presets/cube05_0.png",
						"ctype": "cubemap",
						"channel": 3
					},
					{
						"id": 30,
						"src": "/presets/tex16.png",
						"ctype": "texture",
						"channel": 1
					}
				],
				"outputs": [
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					}
				],
				"code": "",
				"name": "",
				"description": "",
				"type": "image"
			},
			{
				"inputs": [],
				"outputs": [],
				"code": "// Robin\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by David Hoskins.\n\n// Random pitch movements plus a high speed warble cut into three phrases. \n// Background leafy wind noise plus stereo answer calls from the trees.\n\nfloat Hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n//----------------------------------------------------------------------------------------\nvec2 Hash(vec2 p)\n{\n\tp  = fract(p * vec2(1.3983, 1.4427));\n    p += dot(p.yx, p.xy +  vec2(3.5351, 4.3137));\n\treturn fract(vec2(p.x * p.y * 5.4337, p.x * p.y * 7.597));\n}\n\n\nfloat Noise(float n)\n{\n    float f = fract(n);\n    n = floor(n);\n    f = f*f*(3.0-2.0*f);\n    return mix(Hash(n), Hash(n+1.0), f)-.5;\n   \n}\n\nfloat NoiseSlope(float n, float loc)\n{\n    float f = fract(n);\n    n = floor(n);\n    f = smoothstep(0.0, loc, f);\n    return mix(Hash(n), Hash(n+1.0), f);\n}\n\n//--------------------------------------------------------------------------\nvec2 Noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    vec2 res = mix(mix( Hash(p + 0.0), Hash(p + vec2(1.0, 0.0)),f.x),\n                   mix( Hash(p + vec2(0.0, 1.0) ), Hash(p + vec2(1.0, 1.0)),f.x),f.y);\n    return res-.5;\n}\n\n//--------------------------------------------------------------------------\nvec2 FBM( vec2 p )\n{\n    p = mod(p, 200.0);\n    vec2 f;\n\tf  = 0.5000\t * Noise(p); p = p * 3.;\n\tf += 0.2500  * Noise(p); p = p * 3.;\n\tf += 0.1250  * Noise(p); p = p * 3.;\n    f += 0.062125 * Noise(p); p = p * 3.;\n    return f;\n}\n\n\nfloat TweetVolume(float t)\n{\n    float n = NoiseSlope(t*11.0, .1) * abs(sin(t*14.0))*.5;\n    n = (n*smoothstep(0.4, 0.9, NoiseSlope(t*.5+4.0, .1)));\n    return min(n*n * 2.0, 1.0);\n}\n\nfloat Tweet(float t)\n{\n    float which = mod(floor(t/3.0), 3.0);\n    t = mod(t, 3.0);\n    float f;\n    // which = 1.5;\n    // Divided into three different phrases...\n    if (which >= 2.0)\n    {\n        t = 1.5-t;\n        f = sin(6.2831*2.5*t)*Noise(t*14.3+3.0)*100.0+5000.0;\n        f += cos(50.0*6.2831*t);\n        f = sin(6.2831*f*t);\n    }else\n    if (which >= 1.0)\n    {\n        t = 1.5-t;\n        f = (sin(6.2831*3.0*t)*Noise(t*12.5))*100.0+4500.0;\n        f += cos(50.0*6.2831*t);\n        f = sin(6.2831*f*t);\n    }else\n    {\n        t = t - 1.5;\n       \tf = sin(6.2831*2.0*t)*Noise(t*8.1-100.0)*100.0+5000.0;\n        f += cos(50.0*6.2831*t);\n        f = sin(6.2831*f*t);\n    }\n    return f;\n}\n\nvec2 mainSound(float time)\n{\n    \n    float gTime= time;\n    vec2 pos = vec2(gTime * (1250.5), gTime * (1200.2));\n    vec2 noise = FBM(pos)* .15 + FBM(pos*8.0)* (.1*Noise(gTime*.4)+.1);\n    \n    float volume = TweetVolume(gTime);\n    \n    vec2 audio =  (vec2(Tweet(gTime)) * volume + noise) * smoothstep(.0, 2.0, time) * smoothstep(60.0, 55.0, time);\n    audio += vec2( Tweet(gTime+300.0)* TweetVolume(gTime+300.0), Tweet(gTime+120.0)* TweetVolume(gTime+220.0))* .08;\n    return audio;\n}",
				"name": "",
				"description": "",
				"type": "sound"
			}
		]
	}
}