{
	"Shader": {
		"ver": "0.1",
		"info": {
			"id": "MdlXD4",
			"date": "1401919207",
			"viewed": 2584,
			"name": "Waterfalls",
			"username": "P_Malin",
			"description": "Some waterfalls and a rainbow.<br/>Made with so many hacks I don't know what is real any more.<br/>...I still need to work on the camera.",
			"likes": 46,
			"published": 3,
			"flags": 8,
			"tags": [
				"water",
				"rainbow",
				"waterfall",
				"droplets"
			],
			"hasliked": 0
		},
		"renderpass": [
			{
				"inputs": [
					{
						"id": 7,
						"src": "/presets/tex06.jpg",
						"ctype": "texture",
						"channel": 0
					},
					{
						"id": 10,
						"src": "/presets/tex09.jpg",
						"ctype": "texture",
						"channel": 1
					}
				],
				"outputs": [
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					}
				],
				"code": "",
				"name": "",
				"description": "",
				"type": "image"
			},
			{
				"inputs": [],
				"outputs": [],
				"code": "float Hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat SmoothNoise( float t )\n{\n\tfloat noiset = t * 32.0;\n\tfloat tfloor = floor(noiset);\n\tfloat ffract = fract(noiset);\n\t\n\tfloat n0 = Hash(tfloor);\n\tfloat n1 = Hash(tfloor + 1.0);\n\tfloat blend = ffract*ffract*(3.0 - 2.0*ffract);\n\treturn mix(n0, n1, blend) * 2.0 - 1.0;\n}\n\nfloat FBM( float t, float persistence )\n{\n    float result = 0.0;\n    \n    float a = 1.0;\n    float tot = 0.0;\n    result += SmoothNoise(t) * a; tot += a; t *= 2.02; a *= persistence;\n    result += SmoothNoise(t) * a; tot += a; t *= 2.02; a *= persistence; \n    result += SmoothNoise(t) * a; tot += a; \n    tot += a; \n    return result / tot;\n}\n\nvec2 mainSound(float time)\n{\n    return vec2(0.25, 0.4) * FBM(fract(time * 0.25) * 400.0, 0.4)\n        + vec2(0.15, 0.025) * FBM((fract(0.435+time * 0.25)) * 450.0, 0.3);\n}\n\n\n//#define IMAGE_SHADER\n\n#ifdef IMAGE_SHADER\n\nfloat Function( float x )\n{\n\treturn mainSound( iGlobalTime + x / (44100.0 / 60.0) ).x * 0.5 + 0.5;\n}\n\nfloat Plot( vec2 uv )\n{\n\tfloat y = Function(uv.x);\n\t\n\treturn abs(y - uv.y) * iResolution.y;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 vResult = vec3(0.0);\n\t\n\tvResult += Plot(uv);\n\t\n\tfragColor = vec4((vResult),1.0);\n}\n#endif\n",
				"name": "",
				"description": "",
				"type": "sound"
			}
		]
	}
}