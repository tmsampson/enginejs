{
	"Shader": {
		"ver": "0.1",
		"info": {
			"id": "ltlXzl",
			"date": "1439081837",
			"viewed": 820,
			"name": "[SIG15] Fight Club End Scene",
			"username": "movAX13h",
			"description": "With your feet in the air and your head on the ground, try this trick and spin it, yeah.<br/>Partial making of (screen capture of movAX13h, 30 videos): http://bit.ly/1IC3exn",
			"likes": 20,
			"published": 3,
			"flags": 8,
			"tags": [
				"explosion",
				"text",
				"raymarcher",
				"sig15"
			],
			"hasliked": 0
		},
		"renderpass": [
			{
				"inputs": [
					{
						"id": 4,
						"src": "/presets/tex03.jpg",
						"ctype": "texture",
						"channel": 3
					},
					{
						"id": 6,
						"src": "/presets/tex05.jpg",
						"ctype": "texture",
						"channel": 0
					},
					{
						"id": 8,
						"src": "/presets/tex07.jpg",
						"ctype": "texture",
						"channel": 1
					},
					{
						"id": 10,
						"src": "/presets/tex09.jpg",
						"ctype": "texture",
						"channel": 2
					}
				],
				"outputs": [
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					}
				],
				"code": "",
				"name": "",
				"description": "",
				"type": "image"
			},
			{
				"inputs": [
					{
						"id": 30,
						"src": "/presets/tex16.png",
						"ctype": "texture",
						"channel": 0
					}
				],
				"outputs": [
					{
						"channel": "0",
						"dst": "-1"
					}
				],
				"code": "// by srtuss\n\nfloat n2f(float n)\n{return 440.0*pow(2.0,n/12.0);}\nfloat sine(float ph)\n{return sin(ph*6.283185307179586476925286766559);}\nfloat shns(float x)\n{return fract(sin(floor(x * 4000.0)) * 29919.0) - 0.5;}\nfloat hpns(float x, float h)\n{return (shns(x + h) - shns(x - h));}\nfloat adsr(float x, float a, float d)\n{return smoothstep(0.0, a, x) * exp(max(x - a, 0.0) * -d);}\nfloat adsr(float x, float a, float d, float g)\n{return smoothstep(0.0, a, x) * smoothstep(a + d + g, a + g, x);}\nfloat ade(float x, float a, float e, float g)\n{return smoothstep(0.0, a, x) * exp(max(x - (a + g), 0.0) * -e);}\nfloat pwm(float t, float v)\n{\n    float s = 0.001;\n    t = fract(t);\n    return smoothstep(v,  v + s, t) * smoothstep(1.0, 1.0 - s, t) - 0.5;\n}\n\nfloat nse(float x)\n{\n    float x2 = x;\n    return texture2D(iChannel0, vec2(x2 / 256.0, x * 0.01), -100.0).x - 0.5;\n}\n\nvec2 expl(float x, vec2 pan, float seed)\n{\n    float dist = fract(seed * 27623.5978623) * 0.5;\n    float dist2 = fract(seed * 2723.5978623);\n    \n    float ps = 0.2;\n    float verb = adsr(x - 0.1, 0.1, 3.0);\n    float xp = exp(-x / ps) * ps;\n    ps = 0.9;\n    float xp2 = mix(1.0, exp(-x / ps) * ps * 1.0, step(0.5, dist2));\n    vec2 v = nse(xp * 100.0 + seed) * (adsr(x, 0.01, 4.0) + verb * 0.2) * 2.0 * pan.xy;\n    v += nse(x * xp2 * 500.0 - seed) * (adsr(x, 0.1, 4.0) + verb * 0.2) * pan.yx;\n    v += sin(v * (dist2 * 5.0)) * dist2 * 0.3;\n    v += nse(x * 1340.0 + seed * 2.0) * (adsr(x, 0.1, 50.0) + verb * 0.3) * 0.5 * pan.xy;\n    v = (smoothstep(-1.0 + dist, 1.0 - dist, v) - 0.5) * exp(-dist * 1.0);\n    return v;\n}\n\n/*\nt - time\npan - finetune direction of sound origin (1,1 = center)\npitch - change pitch/size of explosion (1 = default)\nnr - number of subsequent explosions (sort of)\ndel - delay between subsequent explosions\nvari - maximum random variation in delay (0 = no variation)\n*/\nvec2 explseq(float t, vec2 pan, float pitch, float nr, float del, float vari)\n{\n    float rp = del;\n    vec2 v = vec2(0.0);\n    float tb = t;\n    float sd = floor(tb / rp);\n    v += expl(max(fract(tb / rp) * rp, tb - nr * rp) * pitch - fract(sd * 19623.232) * vari, pan, sd) * step(0.0, tb);\n    tb = (t - rp * 0.5);\n    sd = floor(tb / rp);\n    v += expl(max(fract(tb / rp) * rp, tb - nr * rp) * pitch - fract(sd * 290.1233) * vari, pan, -sd) * step(0.0, tb);\n    return v;\n}\n\n\nfloat gts(float x, float tf)\n{\n    float ro = 1.0;\n    return sine(x) * 0.2 + sine(x * 2.0) * 0.7 * exp(tf * -1.0 * ro) + sine(x * 3.002) * 0.4 * exp(tf * -2.0 * ro);\n}\n\n#define GTMUL adsr(tf, 0.01, 0.85, 0.12) * step(0.0, tt)\n\nfloat tbt = 60.0 / 160.0;\nfloat tbr = tbt * 4.0;\n\nfloat riff(float time)\n{\n    float v = 0.0;\n    \n    time = mod(time, tbr * 4.0);\n    \n    float tf, tt;\n    // G#5\n    tt = time;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 1.5, 0.0));\n    v += gts(time * n2f(-5.0), tf) * GTMUL;\n    \n    // D#5 short\n    tt = time - tbr * 1.001;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 1.5, 0.0));\n    v += gts(time * n2f(-6.0), tf) * GTMUL * 0.5;\n    \n    // D#5\n    tt = time - tbr * 2.0;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 0.5, 0.0));\n    v += gts(time * n2f(-6.0), tf) * GTMUL;\n    \n    // E5\n    tt = time - tbt;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 2.5, 0.0));\n    v += gts(time * n2f(-1.0), tf) * GTMUL;\n    \n    \n    // E5\n    tt = time - tbr * 3.0;\n    tf = max(mod(tt, tbt * 1.0), max(tt - tbr * 0.5, 0.0));\n    v += gts(time * n2f(-5.0), tf) * GTMUL;\n    \n    // D#5\n    tt = time - tbr * 3.0 - tbt * 1.5;\n    tf = tt;\n    v += gts(time * n2f(-6.0), tf) * GTMUL;\n    \n    // A4 short\n    tt = time - tbr * 3.02;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 0.5, 0.0));\n    v += gts(time * n2f(-12.0), tf) * GTMUL * 0.5;\n    \n    v = sin(v * (1.1 + 0.4 * sin(time * 4.0)));\n    \n    v = smoothstep(-0.25, 0.25, v);\n    \n    return v;\n}\n\nfloat sub(float t)\n{\n    t = mod(t, tbr * 4.0);\n\n    float f = n2f(-5.0);\n    f = mix(f, n2f(-8.0), step(tbr, t));\n    f = mix(f, n2f(-1.0), step(tbr * 2., t));\n    f = mix(f, n2f(0.0), step(tbr * 3., t));\n    \n    float ph = t * f * 0.25;\n    return (sine(ph) + sine(ph * 1.03) * 0.3) * adsr(mod(t, tbr), 0.1, 0.1, tbr * 0.85);\n}\n\nfloat riffhp(float t)\n{\n    float h = 0.0001 + sin(t) * 0.00005;\n    return riff(t + h) - riff(t - h);\n}\n\nfloat echos(float t)\n{\n    return riffhp(t);\n}\n\nvec2 echochn(float t)\n{\n    vec2 v = vec2(0.0);\n    float to = 0.0;\n    float ea = 1.0;\n    vec2 pan = vec2(1.0, 0.5);\n    vec2 of = vec2(0.002, 0.0);\n    float deltime = (60.0 / 160.0) * 4.0 / 3.0;\n    for(int i = 0; i < 10; i++)\n    {\n    \tv += vec2(echos(t - to + of.x), echos(t - to + of.y)) * pan * ea;\n        ea *= 0.2;\n        to += deltime;\n        of = of.yx;\n        pan = pan.yx;\n    }\n    return v;\n}\n\nvec2 mainSound(float time)\n{\n    float t = time - 16.5;\n    vec2 v = \texplseq(t - 1.0, vec2(1.8, 0.4), 0.6, -1.0, 0.5,   0.1) * 1.0;\n    \t v += \texplseq(t - 2.0, vec2(0.2, 1.0), 0.5,  1.0, 0.654, 0.2)  * 0.6;\n    \t v += \texplseq(t - 2.5, vec2(1.0, 1.0), 0.6, 0.5, 0.7,   0.1)  * 0.3;\n    \t v += \texplseq(t - 3.0, vec2(1.0, 0.0), 0.6,  0.8, 0.4,   0.1)  * 0.2;\n    \n    \t v += \texplseq(t - 4.0, vec2(0.8, 0.6), 0.7, 1.0, 0.5,   0.3)  * 0.8;\n    \t v += \texplseq(t - 4.0, vec2(0.1, 1.0), 0.65, 0.5, 0.45, 0.1)  * 0.4;\n    \t v += \texplseq(t - 5.5, vec2(0.5, 0.5), 0.5, 0.9, 0.4,   0.2)  * 0.3;\n\n    \t v += \texplseq(t - 13.4, vec2(0.8, 0.9), 0.5,-1.0, 0.5,   0.1)  * 0.8;\n    \t v += \texplseq(t - 14.4, vec2(0.8, 1.0), 0.4, 0.6, 0.7,   0.2) * 0.5;\n    \t v += \texplseq(t - 14.9, vec2(0.7, 1.0), 0.5, 0.4, 0.8,   0.1)  * 0.3;\n    \t v += \texplseq(t - 16.3, vec2(1.0, 1.0), 0.35, 0.6, 0.7,   0.2) * 0.6;\n\n    t = time - 15.0;\n    vec2 m = echochn(t);\n    m += vec2(sub(t) * 0.5);\n    m *= 0.2;\n    \n    v += m*smoothstep(-0.1, 2.0, t)*smoothstep(30.0, 10.0, t);\n    \n    return vec2(v);\n}",
				"name": "",
				"description": "",
				"type": "sound"
			}
		]
	}
}