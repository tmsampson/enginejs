{
	"Shader": {
		"ver": "0.1",
		"info": {
			"id": "MtsXzf",
			"date": "1438956985",
			"viewed": 1094,
			"name": "[SIG15] Matrix Lobby Scene",
			"username": "reinder",
			"description": "PLEASE REWIND ON FIRST LOAD (⏪), TO MAKE SURE AUDIO IS IN SYNC.",
			"likes": 20,
			"published": 3,
			"flags": 8,
			"tags": [
				"matrix",
				"scene",
				"sig15",
				"lobby"
			],
			"hasliked": 0
		},
		"renderpass": [
			{
				"inputs": [
					{
						"id": 7,
						"src": "/presets/tex06.jpg",
						"ctype": "texture",
						"channel": 1
					},
					{
						"id": 10,
						"src": "/presets/tex09.jpg",
						"ctype": "texture",
						"channel": 2
					},
					{
						"id": 30,
						"src": "/presets/tex16.png",
						"ctype": "texture",
						"channel": 0
					}
				],
				"outputs": [
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					},
					{
						"channel": "0",
						"dst": "-1"
					}
				],
				"code": "",
				"name": "",
				"description": "",
				"type": "image"
			},
			{
				"inputs": [
					{
						"id": 30,
						"src": "/presets/tex16.png",
						"ctype": "texture",
						"channel": 0
					}
				],
				"outputs": [
					{
						"channel": "0",
						"dst": "-1"
					}
				],
				"code": "// Created by Reinder Nijhoff 2015\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/MtsXzf\n//\n\n#define HIGHQUALITY 1\n\n#define N(a) if(t>b)x=b;b+=a;\n#define NF(a,c,g) if(t>b){x=b;f=c;v=g;d=a;}b+=a;\n\n//----------------------------------------------------------------------------------------\n\n#define BPM             (140.0)\n#define STEP            (4.0 * BPM / 60.0)\n#define ISTEP           (1./STEP)\n#define LOOPCOUNT\t\t(16.)\n#define STT(t)\t\t\t(t*(60.0/BPM))\n\n#define PI2 6.283185307179586476925286766559\n\n#define D 36.71\n#define A 55.00\t\n#define B 61.74\n#define C 65.41\n\n//-----------------------------------------------------\n// noise functions\n\n#define MOD2 vec2(.16632,.17369)\nfloat hash(const in float p) { // by Dave Hoskins\n\tvec2 p2 = fract(vec2(p) * MOD2);\n    p2 += dot(p2.yx, p2.xy+19.19);\n\treturn fract(p2.x * p2.y);\n}\n\nfloat sine(const in float x) {\n    return sin(PI2 * x);\n}\n\nfloat loop(const in float t, const in float steps) {\n    return mod(t, steps * ISTEP);\n}\n\nfloat distortion(const in float s, const in float d) {\n\treturn clamp(s * d, -1.0, 1.0);\n}\n\nfloat quan(const in float s, const in float c) {\n\treturn floor(s / c) * c;\n}\n\nbool inLoop( float time, float s, float e ) {\n    float t = (time * (STEP / LOOPCOUNT));\n    return ( t >= s && t < e );\n}\n\n//-----------------------------------------------------\n// instruments by iq and And\n\nfloat snare(const in float t, const in float f0) {\n    float op3 = sine((t * f0) * 2.8020) * exp(-t * 1.0);\n    float op2 = sine((t * f0) * 2.5000 + op3 * 1.00);\n    float op1 = sine((t * f0) * 18.000 + op2 * 0.72);\n\n    return op1 * exp(-t * 5.5);\n}\n\nfloat kick(float tb) {\n\tconst float aa = 5.0;\n\ttb = sqrt(tb * aa) / aa;\n\t\n\tfloat amp = exp(max(tb - 0.015, 0.0) * -5.0);\n\tfloat v = sine(tb * 100.0) * amp;\n\tv += distortion(v, 4.0) * amp;\n\treturn v;\n}\n\nfloat bass(const in float time, const in float freq, const in float duration) {\n    float ph = 1.0;\n    ph *= sin(6.2831*freq*time);\n    ph *= 0.1+0.9*max(0.0,6.0-0.01*freq);\n    ph *= exp(-time*freq*0.3);\n    \n    \n    float y = 0.;\n    y += 0.70*sin(1.00*PI2*freq*time+ph);//*exp(-0.07*time);\n    y += 0.90*sin(2.01*PI2*freq*time+ph);//*exp(-0.11*time);\n\n    y += 0.145*y*y*y;   \n\n    y *= 1.-smoothstep( duration*0.9, duration, time * STEP );\n\n    return y;\n}\n\nfloat bell(const in float t, const in float f0) {\n    float op3 = sine((f0 * t) * 6.0000             ) * exp(-t * 5.0);\n    float op2 = sine((f0 * t) * 7.2364 + op3 * 0.20);\n    float op1 = sine((f0 * t) * 2.0000 + op2 * 0.13) * exp(-t * 2.0);\n\n    return op1;\n}\n\nfloat lift(float time) {\n    return sin(PI2*D*32.*time)*exp(-6.0*time) + bell(time, D*32.);\n}\n\nfloat gun(float time, float f, const in float d) {\n    return distortion( texture2D( iChannel0, vec2(time*5.7864, time*6.9732)*f, -99. ).x *exp(-10.0*time)\n                       * smoothstep(0.,0.1,time) * (1.-smoothstep(0.5,.6,time)), d);\n}\n\n//-----------------------------------------------------\n// loops\n\nfloat loopBass(const in float t, const in float m) {\n    float x = 0., b = 0., f = 0., v = 0., d;\n                \n    NF(2.,D,0.9);NF(2.,D,1.);NF(1.,D,0.5);NF(1.,D,0.6);NF(1.,D,0.5);\n    NF(2.,A,1.05);NF(1.,D,0.5);NF(2.,B,0.9);NF(1.,D,0.5); NF(3.,C,1.);\n    f *= m;\n    \n    return v * bass( (t-x)*ISTEP, f, d );\n\n}\n    \nfloat loopBassIntro(const in float t) {\n    float x = 0., b = 0., f = 0., v = 0., d;\n    NF(4.,A,.5);NF(2.,D,.8);NF(8.,D,1.);NF(2.,D,.25);\n    \n    return v * bass( (t-x)*ISTEP, f*.5, d );\n}\n\nfloat loopDrums(const in float t) {\n    float x = 0., b = 0., r;\n    \n    // base\n    N(3.);N(7.);N(1.);N(5.);\n\tr = kick( (t-x)*ISTEP*1.2 );\n    \n    // bell\n    x = b = 0.;\n    N(4.);N(4.);N(4.);N(2.);N(2.);\n    r += .25 * bell( (t-x)*ISTEP*8., 100. );\n    \n    // hihat\n    x = b = 0.;\n    N(3.);N(3.);N(2.);N(2.);N(4.);\n    r += .35 * snare( (t-x)*ISTEP*2., 200.+t );\n    \n    // snare\n    x = b = 0.;\n    N(4.);N(3.);N(2.);N(3.);N(1.);N(3.);\n    r += .75 * snare( (t-x)*ISTEP*8., 10. );\n\n    return r;\n}\n\nfloat loopDrumsIntro(const in float t) {\n    float x = 0., b = 0.;\n    \n    // snare\n    N(1.);N(3.);N(3.);N(2.);N(1.);N(1.);N(1.);N(1.);N(1.);N(1.);N(1.);\n    return (t/24.) * snare( (t-x)*ISTEP*8., 10. ) + kick(  (t)*ISTEP*1.2 );\n}\n\nfloat loopGun( const in float time, const in float interval, const in float numshots, \n               const in float shotdelay, const in float minf, const in float maxf ) {\n    float it = mod( time, interval );\n\n#if HIGHQUALITY\n    float m = 0.;\n    for( float sh = 0.; sh<2.5; sh+=1.) {\n        if( sh < numshots ) {\n            float g = (0.5+0.5*hash(sh+.5))*gun( it - sh*shotdelay - .5*shotdelay*hash(sh), mix(minf, maxf, hash(sh+.25)), 1.5 );\n    \t\tm = m+g - abs(m)*g;\n        }\n    }\n \n    return m;\n#else\n    float sh = floor( it/shotdelay );\n    if( sh < numshots ) {\n        return (0.5+0.5*hash(sh+.5))*gun( it - sh*shotdelay - .5*shotdelay*hash(sh), mix(minf, maxf, hash(sh+.25)), 1.5 );\n    }\n    return 0.;\n#endif\n}\n\n\n\n//-----------------------------------------------------\n// music\n\nfloat loopMusic(const in float time) {\n\tfloat mtime = loop( time, 16. );\n    float t = mtime * STEP;\n    float m = 1.;\n    \n    float d = 0.;\n    float b = 0.;\n    \n    if( inLoop( time, 2., 36. ) && !inLoop( time, 6., 8. ) && !inLoop( time, 15., 16. )  ) {\n        d = loopDrums( t );\n    }\n    \n    if( inLoop( time, 1., 2. ) || inLoop( time, 7., 8. ) || inLoop( time, 11., 12. ) ) {\n        d += loopDrumsIntro( t );\n    }\n    \n    if( inLoop( time, 10., 12. ) ) {\n        m = B/D;\n    }\n\n    return loopBass( t, m ) + .5*d;\n}\n\nfloat loopIntro(const in float time) {\n\tfloat mtime = loop( time, 16. );\n    float t = mtime * STEP;\n    \n\tif( inLoop( time, .74, 5.25 ) ) {\n        return loopBassIntro( t );\n    }\n    return 0.;\n}\n    \nfloat loopBackground( const in float time ) {\n    float m = 0., g = 0.;\n    g = .5 * loopGun( time, 2., 3., .21, 1., 1.5 );\n    m = m+g - abs(m)*g;\n    \n    g = .95 * loopGun( time-4.123, 3., 1., 1.5, 1., 1.5 );\n    m = m+g - abs(m)*g;\n    \n    g = .7 * loopGun( time-3., 3.2, 2., .41, 1., 1.5 );\n    m = m+g - abs(m)*g;\n    \n    return m;\n}\n\nvoid initExplosions( in float time );\nfloat exTime1, exTime2;\n\n//-----------------------------------------------------\n// main\n    \nvec2 mainSound(float time) {\n        \n    initExplosions(time);\n    // align with music\n    exTime1 = floor( exTime1 / ISTEP * 2.)*ISTEP*.5;\n    exTime2 = floor( exTime2 / ISTEP * 2.)*ISTEP*.5;\n    \n    float m = 0., music = 0., gun1 = 0., gun2 = 0., bg = 0.;\n    \n    if( time < STT(34.) ) {\n        music = loopIntro( time );\n    } else if( time < STT(98.) ){\n        music = loopMusic( time-STT(34.) );\n    }\n    music *= .25;\n    \n    gun1 = gun( time-exTime1, mix(1.,1.5,hash(exTime1)), 3. );\n    gun2 = gun( time-exTime2, mix(1.,1.5,hash(exTime2)), 3. );\n    \n    if( time > STT(34.) && time < STT(84.)  ) {\n        bg = loopBackground(time);\n    }\n    \n    m = m+bg - abs(m)*bg;\n    m = m+music - abs(m)*music;\n    \n    m = m+gun1 - abs(m)*gun1;\n    m = m+gun2 - abs(m)*gun2;\n    \n    m *= 1.5;\n    \n    if( time > 44.5 ) m += .0625*lift( time-44.5);\n    \n    return vec2( clamp(m, -1., 1.) );\n}\n\n\n//----------------------------------------------------------------------\n// explosions\n\n#define E1(a,b,c,d) t+=a;if( time >= t ){exTime2=exTime1;exTime1=t;}\n#define E2(a,b,c,d) t+=a;if( time >= t ){exTime2=exTime1;exTime1=t;}\n#define E3(a,b,c,d) t+=a;if( time >= t ){exTime2=exTime1;exTime1=t;}\n#define E4(a,b,c,d) t+=a;if( time >= t ){exTime2=exTime1;exTime1=t;}\n#define E5(a,b,c,d) t+=a;if( time >= t ){exTime2=exTime1;exTime1=t;}\n\nvoid initExplosions( in float time ) {\n\texTime1 = exTime2 = -1000.;\n    \n    float t = 0.;    \n    E1(STT(21.), 16., 3.9, 8.2 );\n    E2(.7, 16., 5.4, 6.1 );\n    E3(.3, 16., 6.3, 7.7 );\n    E4(1., 16., 4.8, 8.2 );\n    E5(.7, 16., 5.7, 7.3 );\n    \n    t = 0.;\n    E1(STT(34.), -16., 3.9, 5.2 );\n    E2(.5, -16., 5.4, 5.1 );\n    E3(.7, -16., 6.3, 6.7 );\n    E4(.5, -16., 4.8, 7.2 );\n    E5(.4, -16., 5.7, 6.3 );\n        \n    t = 0.;\n    E1(STT(42.), -19.1, 3.9, -4.5 );\n    E2(1.3, -17.4, 5.4, -4.5 );\n    E3(.3, -18.2, 6.3, -4.5 );\n    E4(.4, -17.7, 4.8, -4.5 );\n    E5(.3, -16.7, 5.7, -4.5 );\n  \n    E3(.3, -18.2, 6.3, -4.5 );\n    E2(.2, -17.4, 5.4, -4.5 );\n    E3(.1, -18.2, 6.3, -4.5 );\n    E4(.2, -17.7, 4.8, -4.5 );\n    E5(.1, -16.7, 5.7, -4.5 );\n    \n    E1(.9, -16., 3.9, -5.2 );\n    E2(.5, -16., 5.4, -5.1 );\n    E3(.3, -16., 6.3, -6.7 );\n    E4(.5, -16., 4.8, -7.2 );\n    E5(.4, -16., 5.7, -6.3 );    \n    \n    t = 0.;    \n    E1(STT(58.), 16., 3.9, 2.2 );\n    E2(.2, 16., 5.4, 4.1 );\n    E3(.3, 24., 6.3, 3.7 );\n    E4(.5, 16., 4.8, 8.2 );\n    E5(.7, 24., 5.7, 4.3 );\n    E1(.1, 16., 1.9, 8.2 );\n    E2(.2, 24., 5.4, -2.1 );\n    \n    t = 0.;\n    E1(STT(66.), 16., 3.9, 6.5 );\n    E2(.2, 16., 5.4, 6.1 );\n    E5(.3, 16., 6.7, 7.3 );\n    E3(.3, 16., 6.3, 5.7 );\n    E4(.2, 16., 7.8, 6.2 );\n        \n    E5(.1, 16., 5.7, 4.7 );\n    E1(.2, 16., 3.9, -6.2 );\n    E2(.3, 17., 6.4, -4.5 );\n    E3(.3, 16., 6.3, -5.7 );\n    E4(.5, 16., 7.8, -6.2 );    \n    E5(.3, 16., 5.7, -7.7 );\n    E1(.2, 16., 3.9, -6.2 );\n    E2(.3, 16., 6.4, -4.5 );\n   \n    t = 0.;\n    E1(STT(78.), -17.1, 3.9, -4.5 );\n    E2(.3, -17.4, 5.4, -4.5 );\n    E3(.3, -18.2, 6.3, -4.5 );\n    E4(.4, -17.7, 4.8, -4.5 );\n    E5(.3, -16.7, 5.7, -4.5 );\n  \n    E3(1.3, -18.2, 6.3, -4.5 );\n    E2(.2, -17.4, 5.4, -4.5 );\n    E3(.1, -18.2, 6.3, -4.5 );\n    E4(.2, -17.7, 4.8, -4.5 );\n    E5(.1, -16.7, 5.7, -4.5 );\n    \n    E2(.5, -19.6, 5.4, -5.1 );\n    E1(.9, -19.6, 3.9, -5.2 );\n    E3(.3, -19.6, 6.3, -6.7 );\n    E4(.5, -19.6, 4.8, -7.2 );\n    E5(.4, -19.6, 5.7, -6.3 );\n}\n\n",
				"name": "",
				"description": "",
				"type": "sound"
			}
		]
	}
}