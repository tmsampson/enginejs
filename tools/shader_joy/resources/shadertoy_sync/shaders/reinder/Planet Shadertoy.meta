{
	"Shader": {
		"ver": "0.1",
		"info": {
			"id": "4tjGRh",
			"date": "1427737621",
			"viewed": 4436,
			"name": "Planet Shadertoy",
			"username": "reinder",
			"description": "A seamless space-to-surface flight. This is a tribute to all the great shaders on Shadertoy! Use chrome without angle (or a Mac) and run this shader on med, or high settings (line 4 or 5) to get the full shader and the detail I was aiming for.",
			"likes": 48,
			"published": 3,
			"flags": 8,
			"tags": [
				"terrain",
				"sea",
				"space",
				"ocean",
				"planet",
				"shadertoy",
				"asteroids"
			],
			"hasliked": 0
		},
		"renderpass": [
			{
				"inputs": [],
				"outputs": [],
				"code": "",
				"name": "",
				"description": "",
				"type": "image"
			},
			{
				"inputs": [],
				"outputs": [],
				"code": "\n//----------------------------------------------------------------------\n// Wind function by Dave Hoskins https://www.shadertoy.com/view/4ssXW2\n\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453123);\n}\nvec2 Hash( vec2 p) {\n    return vec2( hash(p.x), hash(p.y) );\n}\n\n//--------------------------------------------------------------------------\nvec2 Noise( in vec2 x ) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    vec2 res = mix(mix( Hash(p + 0.0), Hash(p + vec2(1.0, 0.0)),f.x),\n                   mix( Hash(p + vec2(0.0, 1.0) ), Hash(p + vec2(1.0, 1.0)),f.x),f.y);\n    return res-.5;\n}\n\n//--------------------------------------------------------------------------\nvec2 FBM( vec2 p ) {\n    vec2 f;\n\tf  = 0.5000\t * Noise(p); p = p * 2.32;\n\tf += 0.2500  * Noise(p); p = p * 2.23;\n\tf += 0.1250  * Noise(p); p = p * 2.31;\n    f += 0.0625  * Noise(p); p = p * 2.28;\n    f += 0.03125 * Noise(p);\n    return f;\n}\n\n//--------------------------------------------------------------------------\nvec2 Wind(float n) {\n    vec2 pos = vec2(n * (162.017331), n * (132.066927));\n    vec2 vol = Noise(vec2(n*23.131, -n*42.13254))*1.0 + 1.0;\n    \n    vec2 noise = vec2(FBM(pos*33.313))* vol.x *.5 + vec2(FBM(pos*4.519)) * vol.y;\n    \n\treturn noise;\n}\n\n//----------------------------------------------------------------------\n\n\n\nvec2 mainSound(float time) {\n    //16 - 38\n //   time -= 7.5;\n    time *= .7;\n    float vol = 1.-smoothstep(6.,8.5, time);\n    vol += smoothstep(16.5,20., time);\n    vol *= 1.-smoothstep(23.5,25.5, time);\n    vol += smoothstep(47.5,51.5, time);\n    vol = vol*.8+.2;\n    \n\treturn Wind(time*.05) * vol;\n}",
				"name": "",
				"description": "",
				"type": "sound"
			}
		]
	}
}