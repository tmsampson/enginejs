{
	"Shader": {
		"ver": "0.1",
		"info": {
			"id": "XtlSD7",
			"date": "1438211838",
			"viewed": 20969,
			"name": "[SIG15] Mario World 1-1",
			"username": "knarkowicz",
			"description": "NES Super Mario Bros. World 1-1. My favorite game moment (just like for most kids in the early 90s). 20 years later implemented in a single shader.",
			"likes": 71,
			"published": 3,
			"flags": 8,
			"tags": [
				"2d",
				"sound",
				"music",
				"crt",
				"sprite",
				"mario",
				"nes",
				"sig15"
			],
			"hasliked": 0
		},
		"renderpass": [
			{
				"inputs": [],
				"outputs": [],
				"code": "",
				"name": "",
				"description": "",
				"type": "image"
			},
			{
				"inputs": [],
				"outputs": [],
				"code": "// [SIG15] Mario World 1-1\n// by Krzysztof Narkowicz @knarkowicz\n// \n// Overworld theme based on notes from geoffrey1218's famitracker cover\n// Level clear theme based on notes from WheeljackDude's famitracker cover\n\nfloat SquareWave25( float f, float x )\n{\n    return floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 );\n}\n\nfloat SquareWave50( float f, float x )\n{\n    return floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 );\n}\n\nfloat SinWave( float f, float x )\n{\n    return sin( f * x * 2.0 * 3.14 );\n}\n\nfloat SawtoothWave( float q, float x )\n{\n    float f = fract( x ) - q;\n    f /= (f >= 0.0 ? 1.0 : 0.0) - q;\n    return f * 2.0 - 1.0;\n}\n\nfloat Noise( float x )\n{\n    return fract( sin( 123523.9898 * x ) * 43758.5453 );\n}\n\nfloat Jump( float t )\n{\n    if ( t < 0.0 || t > 0.5 )\n    {\n        return 0.0;\n    }\n    \n\n\tfloat freq = mix( 250.0, 330.0, t / 0.5 );\n    \n    float waveSwitchT = 0.068;\n    if ( t < waveSwitchT ) \n    {\n        return SquareWave50( freq, t ) * 0.5;\n    }\n    else\n    {\n        return SquareWave25( freq, t ) * clamp( 1.0 - ( t - 0.1 ) / ( 0.5 - 0.1 ), 0.0, 1.0 ) * 0.5;\n    }\n}\n\nfloat Stomp( float t )\n{\n    if ( t < 0.0 || t > 0.25 )\n    {\n        return 0.0;\n    }\n \n    float freq = mix( 200.0, 300.0, t / 0.2 );\n\n    if ( t <= 0.1 )\n    {\n    \treturn SquareWave50( freq, t ) * clamp( t / 0.1, 0.0, 1.0 );\n    }\n    else\n    {\n        return SquareWave50( freq, t ) * clamp( ( t - 0.1 ) / 0.15, 0.0, 1.0 );\n    }\n}\n\nfloat PowerUp( float t )\n{\n    if ( t < 0.0 || t > 0.9 )\n    {\n        return 0.0;\n    }\n    \n    float freq = 250.0 + mod( t, 0.3 ) * 50.0;\n    return mix( SquareWave50( freq, t ), SquareWave25( freq, t ), mod( t, 0.3 ) > 0.2 ? 0.5 : 0.0 ) * 0.5;\n}\n\nfloat Bump( float t )\n{\n    if ( t < 0.0 || t > 0.15 )\n    {\n        return 0.0;\n    }\n    \n    float freq = mix( 150.0, 130.0, abs( t - 0.075 ) / 0.075 );\n    return SquareWave50( freq, t ) * 0.5 + SinWave( freq, t ) * 0.5;\n}\n\nfloat Coin( float t )\n{\n    if ( t < 0.0 || t > 0.75 )\n    {\n        return 0.0;\n    }    \n    \n    float freq = t > 0.1 ? 600.0 : 480.0;\n    return SquareWave50( freq, t ) * clamp( 1.0 - ( t - 0.1 ) / 0.65, 0.0, 1.0 );\n}\n\nfloat DownTheFlagpole( float t )\n{\n    if ( t < 0.0 || t > 1.0 )\n    {\n        return 0.0;\n    } \n    \n    float freq = floor( mix( 200.0, 600.0, t ) * 0.1 ) * 10.0;\n\treturn SquareWave50( freq, t ) * clamp( 1.0 - ( t - 0.95 ) / 0.05, 0.0, 1.0 );\n}\n\nfloat InstrumentMain( float f, float t )\n{\n    float ret = 0.0;\n    ret += SquareWave50( f, t ) * clamp( 1.0 - t / 0.250, 0.0, 1.0 ) * 0.5;\n    return ret;\n}\n\nfloat InstrumentBass( float f, float t )\n{\n\treturn SinWave( f, t ) * clamp( 1.0 - ( t - 0.1 ) / 0.01, 0.0, 1.0 );\n}\n\nfloat InstrumentDrums( float f, float t )\n{\n    if ( f == 1.0 )\n    {\n        // open\n    \treturn Noise( t ) * clamp( 1.0 - ( t - 0.08 ) / ( 0.001 ), 0.0, 1.0 ) * 0.66;  \n    }\n    else if ( f == 2.0 )\n    {\n        // close\n        return Noise( t ) * clamp( 1.0 - ( t - 0.0165 ) / ( 0.001 ), 0.0, 1.0 ) * 0.66;\n    }\n    else\n    {\n    \t// kick\n        return SquareWave50( 100.0, t ) * clamp( 1.0 - ( t - 0.0165 ) / ( 0.001 ), 0.0, 1.0 );\n    }\n}\n\n// note frequencies\nconst float E2\t=  82.41;\nconst float F2\t=  87.31;\nconst float G2 \t=  98.00;\nconst float GH2 = 103.83;\nconst float AH2 = 116.54;\nconst float C3 \t= 130.81;\nconst float CH3\t= 138.59;\nconst float D3 \t= 146.83;\nconst float DH3 = 155.56;\nconst float E3 \t= 164.81;\nconst float F3\t= 174.61;\nconst float FH3 = 185.00;\nconst float G3 \t= 196.00;\nconst float GH3 = 207.65;\nconst float A3 \t= 220.00;\nconst float AH3\t= 233.08;\nconst float B3 \t= 246.94;\nconst float C4 \t= 261.63;\nconst float D4  = 293.66;\nconst float DH4 = 311.13;\nconst float E4 \t= 329.63;\nconst float F4 \t= 349.23;\nconst float FH4 = 369.99;\nconst float G4 \t= 392.00;\nconst float GH4 = 415.30;\nconst float A4\t= 440.00;\nconst float AH4 = 466.16;\nconst float C5  = 523.25;\nconst float G5  = 783.99;\n\n#define N( off, freq ) \tif( pos > patternPos + float( off ) ) { notePos = patternPos + float( off ); noteFreq = float( freq ); }\n#define PEND\t\t\tpatternPos += 32.0;\n\nconst float TimeToPos = 1000.0 / 75.0;\nconst float PosToTime = 1.0 / TimeToPos;\n\nfloat OverworldMelody( float time )\n{\n    float pos\t\t\t= time * TimeToPos;\n    float noteFreq \t\t= 0.0;\n    float notePos\t\t= 0.0;\n    float patternPos\t= 0.0;\n    \n#define P0  N(0,E4)N(2,E4)N(6,E4)N(10,C4)N(12,E4)N(16,G4)PEND\n#define P1  N(0,C4)N(6,G3)N(12,E3)N(18,A3)N(22,B3)N(26,AH3)N(28,A3)PEND\n#define P2  N(0,G3)N(3,E4)N(6,G4)N(8,A4)N(12,F4)N(14,G4)N(18,E4)N(22,C4)N(24,D4)N(26,B3)PEND\n#define P3  N(4,G4)N(6,FH4)N(8,F4)N(10,DH4)N(14,E4)N(18,GH3)N(20,A3)N(22,C4)N(26,A3)N(28,C4)N(30,D4)PEND\n#define P4  N(4,G4)N(6,FH4)N(8,F4)N(10,DH4)N(14,E4)N(18,C5)N(22,C5)N(24,C5)PEND\n#define P5  N(4,DH4)N(10,D4)N(16,C4)PEND\n#define P6  N(0,C4)N(2,C4)N(6,C4)N(10,C4)N(12,D4)N(16,E4)N(18,C4)N(22,A3)N(24,G3)PEND\n#define P7  N(0,C4)N(2,C4)N(6,C4)N(10,C4)N(12,D4)N(14,E4)PEND\n    \n    P0 P1 P2 P1 P2 P3 P4 P3 P5 P3 \n    P4 P3 P5 P6 P7 P6 P0 P1 P2 P1\n        \n#undef P0\n#undef P1\n#undef P2\n#undef P3        \n#undef P4        \n#undef P5\n#undef P6\n#undef P7\n\n\treturn InstrumentMain( noteFreq, ( pos - notePos ) * PosToTime );\n}\n\nfloat OverworldHarmony( float time )\n{\n    float pos\t\t\t= time * TimeToPos;\n    float noteFreq \t\t= 0.0;\n    float notePos\t\t= 0.0;\n    float patternPos\t= 0.0;\n    \n#define P0  N(0,FH3)N(2,FH3)N(6,FH3)N(10,FH3)N(12,FH3)N(16,B3)N(24,G3)PEND\n#define P1  N(0,E3)N(6,C3)N(12,G2)N(18,C3)N(22,D3)N(26,CH3)N(28,C3)PEND\n#define P2  N(0,C3)N(3,G3)N(6,B3)N(8,C4)N(12,A3)N(14,B3)N(18,A3)N(22,E3)N(24,F3)N(26,D3)PEND    \n#define P3  N(4,E4)N(6,DH4)N(8,D4)N(10,B3)N(14,C4)N(18,E3)N(20,F3)N(22,G3)N(26,C3)N(28,E3)N(30,F3)PEND    \n#define P4  N(4,E4)N(6,DH4)N(8,D4)N(10,B3)N(14,C4)N(18,F4)N(22,F4)N(24,F4)PEND\n#define P5  N(4,GH3)N(10,F3)N(16,E3)PEND\n#define P6  N(0,GH3)N(2,GH3)N(6,GH3)N(10,GH3)N(12,AH3)N(16,G3)N(18,E3)N(22,E3)N(24,C3)PEND\n#define P7  N(0,GH3)N(2,GH3)N(6,GH3)N(10,GH3)N(12,AH3)N(14,G3)PEND\n    \n    P0 P1 P2 P1 P2 P3 P4 P3 P5 P3 \n    P4 P3 P5 P6 P7 P6 P0 P1 P2 P1\n        \n#undef P0\n#undef P1\n#undef P2\n#undef P3        \n#undef P4        \n#undef P5\n#undef P6\n#undef P7\n\n    return InstrumentMain( noteFreq, ( pos - notePos ) * PosToTime );\n}\n\n\nfloat OverworldBass( float time )\n{\n    float pos\t\t\t= time * TimeToPos;\n    float noteFreq \t\t= 0.0;\n    float notePos\t\t= 0.0;\n    float patternPos\t= 0.0;\n    \n\n#define P0 N(0,D3)N(2,D3)N(6,D3)N(10,D3)N(12,D3)N(16,G4)N(24,G3)PEND\n#define P1 N(0,G3)N(6,E3)N(12,C3)N(18,F3)N(22,G3)N(26,FH3)N(28,F3)PEND\n#define P2 N(0,E3)N(3,C4)N(6,E4)N(8,F4)N(12,D4)N(14,E4)N(18,C4)N(22,A3)N(24,B3)N(26,G3)PEND    \n#define P3 N(0,C3)N(6,G3)N(12,C4)N(16,F3)N(22,C4)N(24,C4)N(28,F3)PEND\n#define P4 N(0,C3)N(6,E3)N(12,G3)N(14,C4)N(18,G5)N(22,G5)N(24,G5)N(28,G3)PEND\n#define P5 N(0,C3)N(4,GH3)N(10,B3)N(16,C4)N(16,C4)N(22,G3)N(24,G3)N(28,C3)PEND\n#define P6 N(0,GH2)N(6,DH3)N(12,GH3)N(16,G3)N(22,C3)N(28,G2)PEND\n    \n    P0 P1 P2 P1 P2 P3 P4 P3 P5 P3 \n    P4 P3 P5 P6 P6 P6 P0 P1 P2 P1\n        \n#undef P0\n#undef P1\n#undef P2\n#undef P3        \n#undef P4        \n#undef P5\n#undef P6        \n\n    return InstrumentBass( noteFreq, ( pos - notePos ) * PosToTime );\n}\n\nfloat OverworldDrums( float time )\n{\n    float pos\t\t\t= time * TimeToPos;\n    float noteFreq \t\t= 0.0;\n    float notePos\t\t= 0.0;\n    float patternPos\t= 0.0;\n    \n    // 1 - open\n    // 2 - close\n    // 3 - kick\n#define P0 N(0,1)N(4,2)N(6,1)N(10,2)N(12,1)N(16,1)N(24,1)N(26,2)N(28,2)N(30,2)PEND\n#define P1 N(0,3)N(4,2)N(7,2)N(8,1)N(12,2)N(15,2)N(16,3)N(20,2)N(23,2)N(24,1)N(28,2)N(31,2)PEND\n#define P2 N(0,1)N(4,2)N(6,1)N(10,2)N(12,1)N(15,1)N(22,1)N(26,2)N(28,2)N(30,2)PEND    \n    \n    P0 P1 P1 P1 P1 P1 P1 P1 P1 P1\n    P1 P1 P1 P2 P2 P2 P0 P1 P1 P1\n        \n#undef P0\n#undef P1        \n#undef P2\n    \n    return InstrumentDrums( noteFreq, ( pos - notePos ) * PosToTime );\n}\n\nconst float TimeToPos2 = 0.5 * TimeToPos;\nconst float PosToTime2 = 1.0 / TimeToPos2;\n\nfloat LevelClearMelody( float time )\n{\n    float pos\t\t\t= time * TimeToPos2;\n    float noteFreq \t\t= 0.0;\n    float notePos\t\t= 0.0;\n    float patternPos\t= 0.0;\n    \n\tN(0,G2)N(1,C3)N(2,E3)N(3,G3)N(4,C4)N(5,E4)N(6,G4)N(9,E4)N(12,GH2)N(13,C3)N(14,DH3)N(15,GH3)N(16,C4)N(17,DH4)N(18,GH4)N(21,DH4)N(24,AH2)N(25,DH3)N(26,F3)N(27,AH3)N(28,D4)N(29,F4)N(30,AH4)N(33,AH4)N(34,AH4)N(35,AH4)N(36,E4)\n\n    return InstrumentMain( noteFreq, ( pos - notePos ) * PosToTime2 );\n}\n\nfloat LevelClearHarmony( float time )\n{\n    float pos\t\t\t= time * TimeToPos2;\n    float noteFreq \t\t= 0.0;\n    float notePos\t\t= 0.0;\n    float patternPos\t= 0.0;\n    \n\tN(1,E2)N(2,G2)N(3,C3)N(4,E3)N(5,G3)N(6,C4)N(9,G3)N(13,E2)N(14,GH2)N(15,C3)N(16,DH3)N(17,GH3)N(18,C4)N(21,GH3)N(25,F2)N(26,AH2)N(27,D3)N(28,F3)N(29,AH3)N(30,D4)N(33,D4)N(36,C5)\n\n    return InstrumentMain( noteFreq, ( pos - notePos ) * PosToTime2 );\n}\n\nfloat LevelClearBass( float time )\n{\n    float pos\t\t\t= time * TimeToPos2;\n    float noteFreq \t\t= 0.0;\n    float notePos\t\t= 0.0;\n    float patternPos\t= 0.0;\n    \n\tN(3,C3)N(4,E3)N(5,G3)N(6,E4)N(9,C4)N(15,C3)N(16,DH3)N(17,GH3)N(18,DH4)N(21,C4)N(27,D3)N(28,F3)N(29,AH3)N(30,F4)N(33,D4)N(34,D4)N(35,D4)N(36,C4)\n\n    return InstrumentBass( noteFreq, ( pos - notePos ) * PosToTime2 );\n}\n\nfloat GameSounds( float time )\n{\n    // play sounds a bit earlier\n    time += 0.1;\n\n    float ret = 0.0;\n    \n    float marioBigJump1 = 27.1;\n    float marioBigJump2 = 29.75;\n    float marioBigJump3 = 35.05;    \n    \n    \n    // Jump sounds\n    float jumpTime = time - 38.7;\n    if ( jumpTime <= 0.0 ) { jumpTime = time - marioBigJump3 - 1.2 - 0.75; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - marioBigJump3 - 1.2; }\n    if ( jumpTime <= 0.0 ) { jumpTime = time - marioBigJump3; }\n    if ( jumpTime <= 0.0 ) { jumpTime = time - 34.15; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 33.7; }\n    if ( jumpTime <= 0.0 ) { jumpTime = time - 32.3; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - marioBigJump2 - 1.0; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - marioBigJump2; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - marioBigJump1 - 1.0; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - marioBigJump1; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 25.75; }    \n\tif ( jumpTime <= 0.0 ) { jumpTime = time - 24.7; }        \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 23.0; } \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 21.7; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 19.65; }   \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 18.7; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 15.1; } \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 13.62; }    \n    if ( jumpTime <= 0.0 ) { jumpTime = time - 11.05; }\n    if ( jumpTime <= 0.0 ) { jumpTime = time - 9.0; }\n    if ( jumpTime <= 0.0 ) { jumpTime = time - 7.8; }\n    if ( jumpTime <= 0.0 ) { jumpTime = time - 6.05; }\n    if ( jumpTime <= 0.0 ) { jumpTime = time - 5.0; }\n    if ( jumpTime <= 0.0 ) { jumpTime = time - 4.2; }\n\tret += Jump( jumpTime );                           \n\n    // block bump sounds\n    float bumpTime = time - 33.9;\n    if ( bumpTime <= 0.0 ) { bumpTime = time - 22.4; }\n    if ( bumpTime <= 0.0 ) { bumpTime = time - 15.4; }\n    if ( bumpTime <= 0.0 ) { bumpTime = time - 5.3; }\n    ret += Bump( bumpTime );\n    \n    // coin sounds\n    float coinTime = time - 33.9;\n    if ( coinTime <= 0.0 ) { coinTime = time - 22.4; }\n    if ( coinTime <= 0.0 ) { coinTime = time - 5.4; }    \n    ret += Coin( coinTime );    \n\n    float stompTime = time - 26.3;\n    if ( stompTime <= 0.0 ) { stompTime = time - 25.3; }\n    if ( stompTime <= 0.0 ) { stompTime = time - 23.5; }    \n    if ( stompTime <= 0.0 ) { stompTime = time - 20.29; }    \n    if ( stompTime <= 0.0 ) { stompTime = time - 10.3; }    \n    ret += Stomp( stompTime );\n    \n\tret += PowerUp( time - 17.0 );    \n\n    ret += DownTheFlagpole( time - 38.95 );    \n    \n    return ret;\n}\n\nvec2 mainSound( float time )\n{    \n    float ret = 0.0;\n    \n    float overworldTime  = max( time -  1.0, 0.0 );\n    float levelClearTime = max( time - 40.2, 0.0 );\n\n    ret += OverworldMelody( overworldTime ) \t* 0.3;\n    ret += OverworldHarmony( overworldTime ) \t* 0.2;\n    ret += OverworldBass( overworldTime )   \t* 0.2;\n    ret += OverworldDrums( overworldTime )\t\t* 0.15;  \n    \n    // overworld theme fadout before the castle\n    ret *= 1.0 - smoothstep( 38.0, 40.0, time );\n    \n    ret += LevelClearMelody( levelClearTime ) \t* 0.3;\n    ret += LevelClearHarmony( levelClearTime ) \t* 0.3;\n    ret += LevelClearBass( levelClearTime ) \t* 0.3;\n    \n    ret += GameSounds( time )\t\t\t\t\t* 0.2;\n    \n    // disable output on first frames\n    ret = time <= 1.0 ? 0.0 : ret;\n    \n    return vec2( ret, ret );\n}",
				"name": "",
				"description": "",
				"type": "sound"
			}
		]
	}
}